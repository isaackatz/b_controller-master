
b_controller-master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003214  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003320  08003320  00013320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800334c  0800334c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800334c  0800334c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800334c  0800334c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800334c  0800334c  0001334c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003350  08003350  00013350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000010  08003360  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08003360  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c673  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002221  00000000  00000000  0002c6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da8  00000000  00000000  0002e8d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c80  00000000  00000000  0002f678  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017cbe  00000000  00000000  000302f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000be00  00000000  00000000  00047fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000876a7  00000000  00000000  00053db6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000db45d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003804  00000000  00000000  000db4d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003308 	.word	0x08003308

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003308 	.word	0x08003308

0800014c <IsChecksumm8bCorrect>:
	msg[length - 2] = (uint8_t) (crc >> 8);
	msg[length - 1] = (uint8_t) crc;
}

bool IsChecksumm8bCorrect(uint8_t *msg, uint16_t length)
{
 800014c:	b480      	push	{r7}
 800014e:	b087      	sub	sp, #28
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	807b      	strh	r3, [r7, #2]
	uint8_t crcGot, crc = 0;
 8000158:	2300      	movs	r3, #0
 800015a:	75fb      	strb	r3, [r7, #23]
	int i;
	
	crcGot = msg[length-1] ;
 800015c:	887b      	ldrh	r3, [r7, #2]
 800015e:	3b01      	subs	r3, #1
 8000160:	687a      	ldr	r2, [r7, #4]
 8000162:	4413      	add	r3, r2
 8000164:	781b      	ldrb	r3, [r3, #0]
 8000166:	73fb      	strb	r3, [r7, #15]
	
	for (i = 1; i < length - 1; ++i) {
 8000168:	2301      	movs	r3, #1
 800016a:	613b      	str	r3, [r7, #16]
 800016c:	e009      	b.n	8000182 <IsChecksumm8bCorrect+0x36>
		crc ^= msg[i];
 800016e:	693b      	ldr	r3, [r7, #16]
 8000170:	687a      	ldr	r2, [r7, #4]
 8000172:	4413      	add	r3, r2
 8000174:	781a      	ldrb	r2, [r3, #0]
 8000176:	7dfb      	ldrb	r3, [r7, #23]
 8000178:	4053      	eors	r3, r2
 800017a:	75fb      	strb	r3, [r7, #23]
	for (i = 1; i < length - 1; ++i) {
 800017c:	693b      	ldr	r3, [r7, #16]
 800017e:	3301      	adds	r3, #1
 8000180:	613b      	str	r3, [r7, #16]
 8000182:	887b      	ldrh	r3, [r7, #2]
 8000184:	3b01      	subs	r3, #1
 8000186:	693a      	ldr	r2, [r7, #16]
 8000188:	429a      	cmp	r2, r3
 800018a:	dbf0      	blt.n	800016e <IsChecksumm8bCorrect+0x22>
	}
	
	if (crc == crcGot) {
 800018c:	7dfa      	ldrb	r2, [r7, #23]
 800018e:	7bfb      	ldrb	r3, [r7, #15]
 8000190:	429a      	cmp	r2, r3
 8000192:	d101      	bne.n	8000198 <IsChecksumm8bCorrect+0x4c>
		return 1;
 8000194:	2301      	movs	r3, #1
 8000196:	e000      	b.n	800019a <IsChecksumm8bCorrect+0x4e>
	}
	else {
		return 0;
 8000198:	2300      	movs	r3, #0
	}
}
 800019a:	4618      	mov	r0, r3
 800019c:	371c      	adds	r7, #28
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr

080001a4 <AddChecksumm8b>:

void AddChecksumm8b(uint8_t *msg, uint16_t length)
{
 80001a4:	b480      	push	{r7}
 80001a6:	b085      	sub	sp, #20
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
 80001ac:	460b      	mov	r3, r1
 80001ae:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0;
 80001b0:	2300      	movs	r3, #0
 80001b2:	73fb      	strb	r3, [r7, #15]
	
	for(int i = 1; i < length - 1; i++) {
 80001b4:	2301      	movs	r3, #1
 80001b6:	60bb      	str	r3, [r7, #8]
 80001b8:	e009      	b.n	80001ce <AddChecksumm8b+0x2a>
		crc ^= msg[i];
 80001ba:	68bb      	ldr	r3, [r7, #8]
 80001bc:	687a      	ldr	r2, [r7, #4]
 80001be:	4413      	add	r3, r2
 80001c0:	781a      	ldrb	r2, [r3, #0]
 80001c2:	7bfb      	ldrb	r3, [r7, #15]
 80001c4:	4053      	eors	r3, r2
 80001c6:	73fb      	strb	r3, [r7, #15]
	for(int i = 1; i < length - 1; i++) {
 80001c8:	68bb      	ldr	r3, [r7, #8]
 80001ca:	3301      	adds	r3, #1
 80001cc:	60bb      	str	r3, [r7, #8]
 80001ce:	887b      	ldrh	r3, [r7, #2]
 80001d0:	3b01      	subs	r3, #1
 80001d2:	68ba      	ldr	r2, [r7, #8]
 80001d4:	429a      	cmp	r2, r3
 80001d6:	dbf0      	blt.n	80001ba <AddChecksumm8b+0x16>
	}
	
	msg[length-1] = crc;
 80001d8:	887b      	ldrh	r3, [r7, #2]
 80001da:	3b01      	subs	r3, #1
 80001dc:	687a      	ldr	r2, [r7, #4]
 80001de:	4413      	add	r3, r2
 80001e0:	7bfa      	ldrb	r2, [r7, #15]
 80001e2:	701a      	strb	r2, [r3, #0]
}
 80001e4:	bf00      	nop
 80001e6:	3714      	adds	r7, #20
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bc80      	pop	{r7}
 80001ec:	4770      	bx	lr

080001ee <parse_normal_package>:

uint8_t tx_array[NORMAL_RESPONSE_LENGTH] = {0};
extern struct keys_struct keys;

bool parse_normal_package(esc_settings *esc_struct,  uint8_t  *message)
{
 80001ee:	b580      	push	{r7, lr}
 80001f0:	b084      	sub	sp, #16
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	6078      	str	r0, [r7, #4]
 80001f6:	6039      	str	r1, [r7, #0]
	if  (IsChecksumm8bCorrect(message, NORMAL_REQUEST_LENGTH))  {
 80001f8:	2105      	movs	r1, #5
 80001fa:	6838      	ldr	r0, [r7, #0]
 80001fc:	f7ff ffa6 	bl	800014c <IsChecksumm8bCorrect>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d014      	beq.n	8000230 <parse_normal_package+0x42>

		struct Request req;

		memcpy((void*)&req,  (void*)message,  NORMAL_REQUEST_LENGTH);
 8000206:	683a      	ldr	r2, [r7, #0]
 8000208:	f107 0308 	add.w	r3, r7, #8
 800020c:	6810      	ldr	r0, [r2, #0]
 800020e:	6018      	str	r0, [r3, #0]
 8000210:	7912      	ldrb	r2, [r2, #4]
 8000212:	711a      	strb	r2, [r3, #4]

        if  (req.address  ==  esc_struct->device_adress)  {
 8000214:	7aba      	ldrb	r2, [r7, #10]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	429a      	cmp	r2, r3
 800021c:	d108      	bne.n	8000230 <parse_normal_package+0x42>
        	esc_struct->PWM_duty  =  req.velocity;
 800021e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	705a      	strb	r2, [r3, #1]
        	update_esc_settings(esc_struct);
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	f000 f8d0 	bl	80003cc <update_esc_settings>
            return true;
 800022c:	2301      	movs	r3, #1
 800022e:	e000      	b.n	8000232 <parse_normal_package+0x44>
        }
	}
    return false;
 8000230:	2300      	movs	r3, #0
}
 8000232:	4618      	mov	r0, r3
 8000234:	3710      	adds	r7, #16
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
	...

0800023c <normal_response>:

void normal_response(UART_HandleTypeDef *huart, esc_settings *esc_struct)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b086      	sub	sp, #24
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
	struct Response resp;

	resp.AA            = 0xAA;
 8000246:	23aa      	movs	r3, #170	; 0xaa
 8000248:	733b      	strb	r3, [r7, #12]
	resp.type          = 1;
 800024a:	2301      	movs	r3, #1
 800024c:	737b      	strb	r3, [r7, #13]
	resp.address       = esc_struct->device_adress;
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	73bb      	strb	r3, [r7, #14]
	resp.state         = 0x55;
 8000254:	2355      	movs	r3, #85	; 0x55
 8000256:	73fb      	strb	r3, [r7, #15]
	resp.current       = 0x55;
 8000258:	2355      	movs	r3, #85	; 0x55
 800025a:	823b      	strh	r3, [r7, #16]
	resp.speed_period  = 0x55;
 800025c:	2355      	movs	r3, #85	; 0x55
 800025e:	827b      	strh	r3, [r7, #18]



	memcpy((void*)tx_array,  (void*)&resp,  NORMAL_RESPONSE_LENGTH - 1);
 8000260:	4b0e      	ldr	r3, [pc, #56]	; (800029c <normal_response+0x60>)
 8000262:	f107 020c 	add.w	r2, r7, #12
 8000266:	ca07      	ldmia	r2, {r0, r1, r2}
 8000268:	c303      	stmia	r3!, {r0, r1}
 800026a:	701a      	strb	r2, [r3, #0]

	AddChecksumm8b(tx_array,  NORMAL_RESPONSE_LENGTH);
 800026c:	210a      	movs	r1, #10
 800026e:	480b      	ldr	r0, [pc, #44]	; (800029c <normal_response+0x60>)
 8000270:	f7ff ff98 	bl	80001a4 <AddChecksumm8b>

    HAL_GPIO_WritePin(RS_485_DIR_GPIO_Port,  RS_485_DIR_Pin,  SET);
 8000274:	2201      	movs	r2, #1
 8000276:	2102      	movs	r1, #2
 8000278:	4809      	ldr	r0, [pc, #36]	; (80002a0 <normal_response+0x64>)
 800027a:	f001 fa7e 	bl	800177a <HAL_GPIO_WritePin>

    HAL_UART_Transmit_IT(huart, tx_array, NORMAL_RESPONSE_LENGTH);
 800027e:	220a      	movs	r2, #10
 8000280:	4906      	ldr	r1, [pc, #24]	; (800029c <normal_response+0x60>)
 8000282:	6878      	ldr	r0, [r7, #4]
 8000284:	f002 fcbf 	bl	8002c06 <HAL_UART_Transmit_IT>

    //HAL_UART_Transmit_DMA(huart, tx_array, NORMAL_RESPONSE_LENGTH);

    HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8000288:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800028c:	4805      	ldr	r0, [pc, #20]	; (80002a4 <normal_response+0x68>)
 800028e:	f001 fa8c 	bl	80017aa <HAL_GPIO_TogglePin>
}
 8000292:	bf00      	nop
 8000294:	3718      	adds	r7, #24
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	2000002c 	.word	0x2000002c
 80002a0:	40010800 	.word	0x40010800
 80002a4:	40011000 	.word	0x40011000

080002a8 <parse_device_package>:

bool parse_device_package(esc_settings *esc_struct, uint8_t *message)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	6039      	str	r1, [r7, #0]
	if  (IsChecksumm8bCorrect(message, DEVICES_REQUEST_LENGTH))  {
 80002b2:	2107      	movs	r1, #7
 80002b4:	6838      	ldr	r0, [r7, #0]
 80002b6:	f7ff ff49 	bl	800014c <IsChecksumm8bCorrect>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d016      	beq.n	80002ee <parse_device_package+0x46>

		struct DevicesRequest req;

		memcpy((void*)&req,  (void*)message,  DEVICES_REQUEST_LENGTH);
 80002c0:	683a      	ldr	r2, [r7, #0]
 80002c2:	f107 0308 	add.w	r3, r7, #8
 80002c6:	6810      	ldr	r0, [r2, #0]
 80002c8:	6018      	str	r0, [r3, #0]
 80002ca:	8891      	ldrh	r1, [r2, #4]
 80002cc:	7992      	ldrb	r2, [r2, #6]
 80002ce:	8099      	strh	r1, [r3, #4]
 80002d0:	719a      	strb	r2, [r3, #6]

        if  (req.address  ==  esc_struct->device_adress)  {
 80002d2:	7aba      	ldrb	r2, [r7, #10]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	429a      	cmp	r2, r3
 80002da:	d108      	bne.n	80002ee <parse_device_package+0x46>
        	esc_struct->PWM_duty  =  req.velocity1;
 80002dc:	7b3b      	ldrb	r3, [r7, #12]
 80002de:	b25a      	sxtb	r2, r3
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	705a      	strb	r2, [r3, #1]
        	update_esc_settings(esc_struct);
 80002e4:	6878      	ldr	r0, [r7, #4]
 80002e6:	f000 f871 	bl	80003cc <update_esc_settings>
            return true;
 80002ea:	2301      	movs	r3, #1
 80002ec:	e000      	b.n	80002f0 <parse_device_package+0x48>
        }
	}
    return false;
 80002ee:	2300      	movs	r3, #0
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	3710      	adds	r7, #16
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <device_response>:

void device_response(UART_HandleTypeDef *huart, esc_settings  *esc_struct)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b086      	sub	sp, #24
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	6039      	str	r1, [r7, #0]

	struct DevicesResponse resp;

	resp.AA            = 0xAA;
 8000302:	23aa      	movs	r3, #170	; 0xaa
 8000304:	733b      	strb	r3, [r7, #12]
	resp.address       = esc_struct->device_adress;
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	737b      	strb	r3, [r7, #13]
	resp.errors        = 0x00;
 800030c:	2300      	movs	r3, #0
 800030e:	73bb      	strb	r3, [r7, #14]
	resp.current1      = 0x0000;
 8000310:	2300      	movs	r3, #0
 8000312:	73fb      	strb	r3, [r7, #15]
 8000314:	2300      	movs	r3, #0
 8000316:	743b      	strb	r3, [r7, #16]
	resp.current2      = 0x0000;
 8000318:	2300      	movs	r3, #0
 800031a:	747b      	strb	r3, [r7, #17]
 800031c:	2300      	movs	r3, #0
 800031e:	74bb      	strb	r3, [r7, #18]
	resp.velocity1     = esc_struct->PWM_duty;
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000326:	b2db      	uxtb	r3, r3
 8000328:	74fb      	strb	r3, [r7, #19]
    resp.velocity2     = 0x00;
 800032a:	2300      	movs	r3, #0
 800032c:	753b      	strb	r3, [r7, #20]

    memcpy(&resp.velocity2, &keys, 1);
 800032e:	4b10      	ldr	r3, [pc, #64]	; (8000370 <device_response+0x78>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	753b      	strb	r3, [r7, #20]
    memcpy((void*)tx_array,  (void*)&resp,  DEVICES_RESPONSE_LENGTH - 1);
 8000334:	f107 030c 	add.w	r3, r7, #12
 8000338:	2209      	movs	r2, #9
 800033a:	4619      	mov	r1, r3
 800033c:	480d      	ldr	r0, [pc, #52]	; (8000374 <device_response+0x7c>)
 800033e:	f002 ffcf 	bl	80032e0 <memcpy>

	AddChecksumm8b(tx_array,  DEVICES_RESPONSE_LENGTH);
 8000342:	210a      	movs	r1, #10
 8000344:	480b      	ldr	r0, [pc, #44]	; (8000374 <device_response+0x7c>)
 8000346:	f7ff ff2d 	bl	80001a4 <AddChecksumm8b>

    HAL_GPIO_WritePin(RS_485_DIR_GPIO_Port,  RS_485_DIR_Pin,  SET);
 800034a:	2201      	movs	r2, #1
 800034c:	2102      	movs	r1, #2
 800034e:	480a      	ldr	r0, [pc, #40]	; (8000378 <device_response+0x80>)
 8000350:	f001 fa13 	bl	800177a <HAL_GPIO_WritePin>

    HAL_UART_Transmit_IT(huart,  tx_array,  DEVICES_RESPONSE_LENGTH);
 8000354:	220a      	movs	r2, #10
 8000356:	4907      	ldr	r1, [pc, #28]	; (8000374 <device_response+0x7c>)
 8000358:	6878      	ldr	r0, [r7, #4]
 800035a:	f002 fc54 	bl	8002c06 <HAL_UART_Transmit_IT>
    HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 800035e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000362:	4806      	ldr	r0, [pc, #24]	; (800037c <device_response+0x84>)
 8000364:	f001 fa21 	bl	80017aa <HAL_GPIO_TogglePin>
}
 8000368:	bf00      	nop
 800036a:	3718      	adds	r7, #24
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	200000dc 	.word	0x200000dc
 8000374:	2000002c 	.word	0x2000002c
 8000378:	40010800 	.word	0x40010800
 800037c:	40011000 	.word	0x40011000

08000380 <parse_config_package>:


bool parse_config_package(esc_settings *esc_struct,  uint8_t  *message)
{
 8000380:	b5b0      	push	{r4, r5, r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
	if  (IsChecksumm8bCorrect(message, CONFIG_REQUEST_LENGTH)) {
 800038a:	2112      	movs	r1, #18
 800038c:	6838      	ldr	r0, [r7, #0]
 800038e:	f7ff fedd 	bl	800014c <IsChecksumm8bCorrect>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d014      	beq.n	80003c2 <parse_config_package+0x42>

        struct ConfigRequest req;

        memcpy((void*)&req,  (void*)message,  CONFIG_REQUEST_LENGTH);
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	f107 040c 	add.w	r4, r7, #12
 800039e:	461d      	mov	r5, r3
 80003a0:	6828      	ldr	r0, [r5, #0]
 80003a2:	6869      	ldr	r1, [r5, #4]
 80003a4:	68aa      	ldr	r2, [r5, #8]
 80003a6:	68eb      	ldr	r3, [r5, #12]
 80003a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003aa:	8a2b      	ldrh	r3, [r5, #16]
 80003ac:	8023      	strh	r3, [r4, #0]

        if  (req.old_address  ==  esc_struct->device_adress)  {
 80003ae:	7c3a      	ldrb	r2, [r7, #16]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	429a      	cmp	r2, r3
 80003b6:	d104      	bne.n	80003c2 <parse_config_package+0x42>
        	esc_struct->device_adress  =  req.new_address;
 80003b8:	7c7a      	ldrb	r2, [r7, #17]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	701a      	strb	r2, [r3, #0]
        	return true;
 80003be:	2301      	movs	r3, #1
 80003c0:	e000      	b.n	80003c4 <parse_config_package+0x44>
        }
	}
	return false;
 80003c2:	2300      	movs	r3, #0
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3720      	adds	r7, #32
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bdb0      	pop	{r4, r5, r7, pc}

080003cc <update_esc_settings>:
#include "esc.h"

esc_settings esc_struct;

void update_esc_settings(esc_settings *esc_struct)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	if (esc_struct->PWM_duty > 0) {
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	dd0b      	ble.n	80003f6 <update_esc_settings+0x2a>
		TIM3->CCR1  =  SERVO_STOP_DUTY + esc_struct->PWM_duty*PWM_RESIZE_COEF;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80003e4:	461a      	mov	r2, r3
 80003e6:	4613      	mov	r3, r2
 80003e8:	005b      	lsls	r3, r3, #1
 80003ea:	4413      	add	r3, r2
 80003ec:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <update_esc_settings+0x4c>)
 80003f2:	635a      	str	r2, [r3, #52]	; 0x34
	} else {
		TIM3->CCR1  =  SERVO_STOP_DUTY - (~esc_struct->PWM_duty + 1)*PWM_RESIZE_COEF;
	}
}
 80003f4:	e00a      	b.n	800040c <update_esc_settings+0x40>
		TIM3->CCR1  =  SERVO_STOP_DUTY - (~esc_struct->PWM_duty + 1)*PWM_RESIZE_COEF;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80003fc:	461a      	mov	r2, r3
 80003fe:	4613      	mov	r3, r2
 8000400:	005b      	lsls	r3, r3, #1
 8000402:	4413      	add	r3, r2
 8000404:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8000408:	4b03      	ldr	r3, [pc, #12]	; (8000418 <update_esc_settings+0x4c>)
 800040a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	40000400 	.word	0x40000400

0800041c <FLASH_WriteSettings>:

	esc_struct->device_adress  =  config.adress;
}

void  FLASH_WriteSettings (esc_settings *esc_struct)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b08d      	sub	sp, #52	; 0x34
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]

	esc_config config;

	config.adress  =  esc_struct->device_adress;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	f887 3020 	strb.w	r3, [r7, #32]

	HAL_FLASH_Unlock();
 800042c:	f000 feac 	bl	8001188 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef errase_conf;
	errase_conf.TypeErase    =  FLASH_TYPEERASE_PAGES;      //errase only 1 page
 8000430:	2300      	movs	r3, #0
 8000432:	613b      	str	r3, [r7, #16]
	errase_conf.PageAddress  =  (uint32_t)CONFIG_PAGE_ADDR;
 8000434:	4b19      	ldr	r3, [pc, #100]	; (800049c <FLASH_WriteSettings+0x80>)
 8000436:	61bb      	str	r3, [r7, #24]
	errase_conf.NbPages      =  1;
 8000438:	2301      	movs	r3, #1
 800043a:	61fb      	str	r3, [r7, #28]

	uint32_t page_error;

	HAL_FLASHEx_Erase(&errase_conf,  &page_error);
 800043c:	f107 020c 	add.w	r2, r7, #12
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	4611      	mov	r1, r2
 8000446:	4618      	mov	r0, r3
 8000448:	f000 ff86 	bl	8001358 <HAL_FLASHEx_Erase>

	uint32_t  *flash_config_struct_addr  =  (uint32_t *)CONFIG_PAGE_ADDR;
 800044c:	4b13      	ldr	r3, [pc, #76]	; (800049c <FLASH_WriteSettings+0x80>)
 800044e:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t  *config_struct_addr        =  (void *)&config;
 8000450:	f107 0320 	add.w	r3, r7, #32
 8000454:	62bb      	str	r3, [r7, #40]	; 0x28

    for (uint8_t  i  =  0;  i  <  AMOUNT_OF_32B_WORDS;  i++)  {
 8000456:	2300      	movs	r3, #0
 8000458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800045c:	e014      	b.n	8000488 <FLASH_WriteSettings+0x6c>
    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)flash_config_struct_addr,  *config_struct_addr);
 800045e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f04f 0400 	mov.w	r4, #0
 8000468:	461a      	mov	r2, r3
 800046a:	4623      	mov	r3, r4
 800046c:	2002      	movs	r0, #2
 800046e:	f000 fe1b 	bl	80010a8 <HAL_FLASH_Program>
     	flash_config_struct_addr++;
 8000472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000474:	3304      	adds	r3, #4
 8000476:	62fb      	str	r3, [r7, #44]	; 0x2c
    	config_struct_addr++;
 8000478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800047a:	3304      	adds	r3, #4
 800047c:	62bb      	str	r3, [r7, #40]	; 0x28
    for (uint8_t  i  =  0;  i  <  AMOUNT_OF_32B_WORDS;  i++)  {
 800047e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000482:	3301      	adds	r3, #1
 8000484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800048c:	2b00      	cmp	r3, #0
 800048e:	d0e6      	beq.n	800045e <FLASH_WriteSettings+0x42>
    }

    HAL_FLASH_Lock();
 8000490:	f000 fea0 	bl	80011d4 <HAL_FLASH_Lock>
}
 8000494:	bf00      	nop
 8000496:	3734      	adds	r7, #52	; 0x34
 8000498:	46bd      	mov	sp, r7
 800049a:	bd90      	pop	{r4, r7, pc}
 800049c:	08007c00 	.word	0x08007c00

080004a0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004a4:	f000 fbf8 	bl	8000c98 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004a8:	f000 f832 	bl	8000510 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004ac:	f000 f90c 	bl	80006c8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004b0:	f000 f8e0 	bl	8000674 <MX_USART2_UART_Init>
	MX_TIM3_Init();
 80004b4:	f000 f868 	bl	8000588 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(RS_485_DIR_GPIO_Port, RS_485_DIR_Pin, RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2102      	movs	r1, #2
 80004bc:	480e      	ldr	r0, [pc, #56]	; (80004f8 <main+0x58>)
 80004be:	f001 f95c 	bl	800177a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c8:	480c      	ldr	r0, [pc, #48]	; (80004fc <main+0x5c>)
 80004ca:	f001 f956 	bl	800177a <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80004ce:	2100      	movs	r1, #0
 80004d0:	480b      	ldr	r0, [pc, #44]	; (8000500 <main+0x60>)
 80004d2:	f001 fe47 	bl	8002164 <HAL_TIM_PWM_Start>

	esc_struct.PWM_duty = 0;
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <main+0x64>)
 80004d8:	2200      	movs	r2, #0
 80004da:	705a      	strb	r2, [r3, #1]
	update_esc_settings(&esc_struct);
 80004dc:	4809      	ldr	r0, [pc, #36]	; (8000504 <main+0x64>)
 80004de:	f7ff ff75 	bl	80003cc <update_esc_settings>
	HAL_Delay(3000);
 80004e2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80004e6:	f000 fc39 	bl	8000d5c <HAL_Delay>

	HAL_UART_Receive_IT(&huart2, rx_array, 1);
 80004ea:	2201      	movs	r2, #1
 80004ec:	4906      	ldr	r1, [pc, #24]	; (8000508 <main+0x68>)
 80004ee:	4807      	ldr	r0, [pc, #28]	; (800050c <main+0x6c>)
 80004f0:	f002 fbcd 	bl	8002c8e <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80004f4:	e7fe      	b.n	80004f4 <main+0x54>
 80004f6:	bf00      	nop
 80004f8:	40010800 	.word	0x40010800
 80004fc:	40011000 	.word	0x40011000
 8000500:	20000050 	.word	0x20000050
 8000504:	2000004c 	.word	0x2000004c
 8000508:	20000038 	.word	0x20000038
 800050c:	20000098 	.word	0x20000098

08000510 <SystemClock_Config>:
}
	/**
	 * @brief System Clock Configuration
	 * @retval None
	 */
	void SystemClock_Config(void) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b090      	sub	sp, #64	; 0x40
 8000514:	af00      	add	r7, sp, #0
		RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000516:	f107 0318 	add.w	r3, r7, #24
 800051a:	2228      	movs	r2, #40	; 0x28
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f002 fee9 	bl	80032f6 <memset>
		RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

		/** Initializes the RCC Oscillators according to the specified parameters
		 * in the RCC_OscInitTypeDef structure.
		 */
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000532:	2302      	movs	r3, #2
 8000534:	61bb      	str	r3, [r7, #24]
		RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000536:	2301      	movs	r3, #1
 8000538:	62bb      	str	r3, [r7, #40]	; 0x28
		RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053a:	2310      	movs	r3, #16
 800053c:	62fb      	str	r3, [r7, #44]	; 0x2c
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800053e:	2300      	movs	r3, #0
 8000540:	637b      	str	r3, [r7, #52]	; 0x34
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000542:	f107 0318 	add.w	r3, r7, #24
 8000546:	4618      	mov	r0, r3
 8000548:	f001 f948 	bl	80017dc <HAL_RCC_OscConfig>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <SystemClock_Config+0x46>
			Error_Handler();
 8000552:	f000 f941 	bl	80007d8 <Error_Handler>
		}
		/** Initializes the CPU, AHB and APB buses clocks
		 */
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000556:	230f      	movs	r3, #15
 8000558:	607b      	str	r3, [r7, #4]
				| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	613b      	str	r3, [r7, #16]
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0)
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f001 fbb4 	bl	8001cdc <HAL_RCC_ClockConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x6e>
				!= HAL_OK) {
			Error_Handler();
 800057a:	f000 f92d 	bl	80007d8 <Error_Handler>
		}
	}
 800057e:	bf00      	nop
 8000580:	3740      	adds	r7, #64	; 0x40
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
	...

08000588 <MX_TIM3_Init>:
	/**
	 * @brief TIM3 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM3_Init(void) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b08e      	sub	sp, #56	; 0x38
 800058c:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM3_Init 0 */

		/* USER CODE END TIM3_Init 0 */

		TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800058e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
		TIM_OC_InitTypeDef sConfigOC = { 0 };
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
 80005b4:	615a      	str	r2, [r3, #20]
 80005b6:	619a      	str	r2, [r3, #24]

		/* USER CODE BEGIN TIM3_Init 1 */

		/* USER CODE END TIM3_Init 1 */
		htim3.Instance = TIM3;
 80005b8:	4b2c      	ldr	r3, [pc, #176]	; (800066c <MX_TIM3_Init+0xe4>)
 80005ba:	4a2d      	ldr	r2, [pc, #180]	; (8000670 <MX_TIM3_Init+0xe8>)
 80005bc:	601a      	str	r2, [r3, #0]
		htim3.Init.Prescaler = 23;
 80005be:	4b2b      	ldr	r3, [pc, #172]	; (800066c <MX_TIM3_Init+0xe4>)
 80005c0:	2217      	movs	r2, #23
 80005c2:	605a      	str	r2, [r3, #4]
		htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c4:	4b29      	ldr	r3, [pc, #164]	; (800066c <MX_TIM3_Init+0xe4>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
		htim3.Init.Period = 60000;
 80005ca:	4b28      	ldr	r3, [pc, #160]	; (800066c <MX_TIM3_Init+0xe4>)
 80005cc:	f64e 2260 	movw	r2, #60000	; 0xea60
 80005d0:	60da      	str	r2, [r3, #12]
		htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d2:	4b26      	ldr	r3, [pc, #152]	; (800066c <MX_TIM3_Init+0xe4>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
		htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d8:	4b24      	ldr	r3, [pc, #144]	; (800066c <MX_TIM3_Init+0xe4>)
 80005da:	2200      	movs	r2, #0
 80005dc:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80005de:	4823      	ldr	r0, [pc, #140]	; (800066c <MX_TIM3_Init+0xe4>)
 80005e0:	f001 fd18 	bl	8002014 <HAL_TIM_Base_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_TIM3_Init+0x66>
			Error_Handler();
 80005ea:	f000 f8f5 	bl	80007d8 <Error_Handler>
		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80005f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005f8:	4619      	mov	r1, r3
 80005fa:	481c      	ldr	r0, [pc, #112]	; (800066c <MX_TIM3_Init+0xe4>)
 80005fc:	f001 ff0c 	bl	8002418 <HAL_TIM_ConfigClockSource>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_TIM3_Init+0x82>
			Error_Handler();
 8000606:	f000 f8e7 	bl	80007d8 <Error_Handler>
		}
		if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800060a:	4818      	ldr	r0, [pc, #96]	; (800066c <MX_TIM3_Init+0xe4>)
 800060c:	f001 fd51 	bl	80020b2 <HAL_TIM_PWM_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_TIM3_Init+0x92>
			Error_Handler();
 8000616:	f000 f8df 	bl	80007d8 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800061a:	2300      	movs	r3, #0
 800061c:	623b      	str	r3, [r7, #32]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800061e:	2300      	movs	r3, #0
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
		if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	4619      	mov	r1, r3
 8000628:	4810      	ldr	r0, [pc, #64]	; (800066c <MX_TIM3_Init+0xe4>)
 800062a:	f002 fa47 	bl	8002abc <HAL_TIMEx_MasterConfigSynchronization>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM3_Init+0xb0>
				!= HAL_OK) {
			Error_Handler();
 8000634:	f000 f8d0 	bl	80007d8 <Error_Handler>
		}
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000638:	2360      	movs	r3, #96	; 0x60
 800063a:	607b      	str	r3, [r7, #4]
		sConfigOC.Pulse = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
		if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2200      	movs	r2, #0
 800064c:	4619      	mov	r1, r3
 800064e:	4807      	ldr	r0, [pc, #28]	; (800066c <MX_TIM3_Init+0xe4>)
 8000650:	f001 fe24 	bl	800229c <HAL_TIM_PWM_ConfigChannel>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM3_Init+0xd6>
				!= HAL_OK) {
			Error_Handler();
 800065a:	f000 f8bd 	bl	80007d8 <Error_Handler>
		}
		/* USER CODE BEGIN TIM3_Init 2 */

		/* USER CODE END TIM3_Init 2 */
		HAL_TIM_MspPostInit(&htim3);
 800065e:	4803      	ldr	r0, [pc, #12]	; (800066c <MX_TIM3_Init+0xe4>)
 8000660:	f000 f918 	bl	8000894 <HAL_TIM_MspPostInit>

	}
 8000664:	bf00      	nop
 8000666:	3738      	adds	r7, #56	; 0x38
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000050 	.word	0x20000050
 8000670:	40000400 	.word	0x40000400

08000674 <MX_USART2_UART_Init>:
	/**
	 * @brief USART2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_USART2_UART_Init(void) {
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
		/* USER CODE END USART2_Init 0 */

		/* USER CODE BEGIN USART2_Init 1 */

		/* USER CODE END USART2_Init 1 */
		huart2.Instance = USART2;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_USART2_UART_Init+0x4c>)
 800067a:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <MX_USART2_UART_Init+0x50>)
 800067c:	601a      	str	r2, [r3, #0]
		huart2.Init.BaudRate = 115200;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_USART2_UART_Init+0x4c>)
 8000680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000684:	605a      	str	r2, [r3, #4]
		huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_USART2_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_1;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_USART2_UART_Init+0x4c>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_NONE;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_USART2_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
		huart2.Init.Mode = UART_MODE_TX_RX;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_USART2_UART_Init+0x4c>)
 800069a:	220c      	movs	r2, #12
 800069c:	615a      	str	r2, [r3, #20]
		huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <MX_USART2_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
		huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_USART2_UART_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
		if (HAL_UART_Init(&huart2) != HAL_OK) {
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_USART2_UART_Init+0x4c>)
 80006ac:	f002 fa5e 	bl	8002b6c <HAL_UART_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_USART2_UART_Init+0x46>
			Error_Handler();
 80006b6:	f000 f88f 	bl	80007d8 <Error_Handler>
		}
		/* USER CODE BEGIN USART2_Init 2 */

		/* USER CODE END USART2_Init 2 */

	}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000098 	.word	0x20000098
 80006c4:	40004400 	.word	0x40004400

080006c8 <MX_GPIO_Init>:
	/**
	 * @brief GPIO Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_GPIO_Init(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80006dc:	4b3a      	ldr	r3, [pc, #232]	; (80007c8 <MX_GPIO_Init+0x100>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a39      	ldr	r2, [pc, #228]	; (80007c8 <MX_GPIO_Init+0x100>)
 80006e2:	f043 0310 	orr.w	r3, r3, #16
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b37      	ldr	r3, [pc, #220]	; (80007c8 <MX_GPIO_Init+0x100>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f003 0310 	and.w	r3, r3, #16
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80006f4:	4b34      	ldr	r3, [pc, #208]	; (80007c8 <MX_GPIO_Init+0x100>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a33      	ldr	r2, [pc, #204]	; (80007c8 <MX_GPIO_Init+0x100>)
 80006fa:	f043 0320 	orr.w	r3, r3, #32
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b31      	ldr	r3, [pc, #196]	; (80007c8 <MX_GPIO_Init+0x100>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f003 0320 	and.w	r3, r3, #32
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800070c:	4b2e      	ldr	r3, [pc, #184]	; (80007c8 <MX_GPIO_Init+0x100>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a2d      	ldr	r2, [pc, #180]	; (80007c8 <MX_GPIO_Init+0x100>)
 8000712:	f043 0304 	orr.w	r3, r3, #4
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b2b      	ldr	r3, [pc, #172]	; (80007c8 <MX_GPIO_Init+0x100>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0304 	and.w	r3, r3, #4
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000724:	4b28      	ldr	r3, [pc, #160]	; (80007c8 <MX_GPIO_Init+0x100>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a27      	ldr	r2, [pc, #156]	; (80007c8 <MX_GPIO_Init+0x100>)
 800072a:	f043 0308 	orr.w	r3, r3, #8
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <MX_GPIO_Init+0x100>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0308 	and.w	r3, r3, #8
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	683b      	ldr	r3, [r7, #0]

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000742:	4822      	ldr	r0, [pc, #136]	; (80007cc <MX_GPIO_Init+0x104>)
 8000744:	f001 f819 	bl	800177a <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(RS_485_DIR_GPIO_Port, RS_485_DIR_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2102      	movs	r1, #2
 800074c:	4820      	ldr	r0, [pc, #128]	; (80007d0 <MX_GPIO_Init+0x108>)
 800074e:	f001 f814 	bl	800177a <HAL_GPIO_WritePin>

		/*Configure GPIO pin : DEBUG_LED_Pin */
		GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8000752:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000756:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	2301      	movs	r3, #1
 800075a:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2302      	movs	r3, #2
 8000762:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	4619      	mov	r1, r3
 800076a:	4818      	ldr	r0, [pc, #96]	; (80007cc <MX_GPIO_Init+0x104>)
 800076c:	f000 fe9c 	bl	80014a8 <HAL_GPIO_Init>

		/*Configure GPIO pin : RS_485_DIR_Pin */
		GPIO_InitStruct.Pin = RS_485_DIR_Pin;
 8000770:	2302      	movs	r3, #2
 8000772:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2302      	movs	r3, #2
 800077e:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(RS_485_DIR_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	4619      	mov	r1, r3
 8000786:	4812      	ldr	r0, [pc, #72]	; (80007d0 <MX_GPIO_Init+0x108>)
 8000788:	f000 fe8e 	bl	80014a8 <HAL_GPIO_Init>

		/*Configure GPIO pins : PB12 PB13 PB14 PB15 */
		GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
 800078c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000790:	613b      	str	r3, [r7, #16]
				| GPIO_PIN_15;
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000796:	2302      	movs	r3, #2
 8000798:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	f107 0310 	add.w	r3, r7, #16
 800079e:	4619      	mov	r1, r3
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <MX_GPIO_Init+0x10c>)
 80007a2:	f000 fe81 	bl	80014a8 <HAL_GPIO_Init>

		/*Configure GPIO pins : PA8 PA9 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80007a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007aa:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007b0:	2302      	movs	r3, #2
 80007b2:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	4619      	mov	r1, r3
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_GPIO_Init+0x108>)
 80007bc:	f000 fe74 	bl	80014a8 <HAL_GPIO_Init>

	}
 80007c0:	bf00      	nop
 80007c2:	3720      	adds	r7, #32
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40011000 	.word	0x40011000
 80007d0:	40010800 	.word	0x40010800
 80007d4:	40010c00 	.word	0x40010c00

080007d8 <Error_Handler>:

	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval None
	 */
	void Error_Handler(void) {
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

		/* USER CODE END Error_Handler_Debug */
	}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007ea:	4b19      	ldr	r3, [pc, #100]	; (8000850 <HAL_MspInit+0x6c>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	4a18      	ldr	r2, [pc, #96]	; (8000850 <HAL_MspInit+0x6c>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6193      	str	r3, [r2, #24]
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <HAL_MspInit+0x6c>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <HAL_MspInit+0x6c>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	4a12      	ldr	r2, [pc, #72]	; (8000850 <HAL_MspInit+0x6c>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080c:	61d3      	str	r3, [r2, #28]
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <HAL_MspInit+0x6c>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	2005      	movs	r0, #5
 8000820:	f000 fb95 	bl	8000f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000824:	2005      	movs	r0, #5
 8000826:	f000 fbae 	bl	8000f86 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <HAL_MspInit+0x70>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <HAL_MspInit+0x70>)
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000
 8000854:	40010000 	.word	0x40010000

08000858 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a09      	ldr	r2, [pc, #36]	; (800088c <HAL_TIM_Base_MspInit+0x34>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d10b      	bne.n	8000882 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_TIM_Base_MspInit+0x38>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	4a08      	ldr	r2, [pc, #32]	; (8000890 <HAL_TIM_Base_MspInit+0x38>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	61d3      	str	r3, [r2, #28]
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_TIM_Base_MspInit+0x38>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000882:	bf00      	nop
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	40000400 	.word	0x40000400
 8000890:	40021000 	.word	0x40021000

08000894 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <HAL_TIM_MspPostInit+0x58>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d117      	bne.n	80008e4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b4:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <HAL_TIM_MspPostInit+0x5c>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <HAL_TIM_MspPostInit+0x5c>)
 80008ba:	f043 0304 	orr.w	r3, r3, #4
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <HAL_TIM_MspPostInit+0x5c>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f003 0304 	and.w	r3, r3, #4
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008cc:	2340      	movs	r3, #64	; 0x40
 80008ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2302      	movs	r3, #2
 80008d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	4619      	mov	r1, r3
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <HAL_TIM_MspPostInit+0x60>)
 80008e0:	f000 fde2 	bl	80014a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40000400 	.word	0x40000400
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40010800 	.word	0x40010800

080008f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a1f      	ldr	r2, [pc, #124]	; (8000990 <HAL_UART_MspInit+0x98>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d137      	bne.n	8000988 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000918:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <HAL_UART_MspInit+0x9c>)
 800091a:	69db      	ldr	r3, [r3, #28]
 800091c:	4a1d      	ldr	r2, [pc, #116]	; (8000994 <HAL_UART_MspInit+0x9c>)
 800091e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000922:	61d3      	str	r3, [r2, #28]
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <HAL_UART_MspInit+0x9c>)
 8000926:	69db      	ldr	r3, [r3, #28]
 8000928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <HAL_UART_MspInit+0x9c>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a17      	ldr	r2, [pc, #92]	; (8000994 <HAL_UART_MspInit+0x9c>)
 8000936:	f043 0304 	orr.w	r3, r3, #4
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_UART_MspInit+0x9c>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f003 0304 	and.w	r3, r3, #4
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000948:	2304      	movs	r3, #4
 800094a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 0310 	add.w	r3, r7, #16
 8000958:	4619      	mov	r1, r3
 800095a:	480f      	ldr	r0, [pc, #60]	; (8000998 <HAL_UART_MspInit+0xa0>)
 800095c:	f000 fda4 	bl	80014a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000960:	2308      	movs	r3, #8
 8000962:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	4619      	mov	r1, r3
 8000972:	4809      	ldr	r0, [pc, #36]	; (8000998 <HAL_UART_MspInit+0xa0>)
 8000974:	f000 fd98 	bl	80014a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	2026      	movs	r0, #38	; 0x26
 800097e:	f000 fae6 	bl	8000f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000982:	2026      	movs	r0, #38	; 0x26
 8000984:	f000 faff 	bl	8000f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000988:	bf00      	nop
 800098a:	3720      	adds	r7, #32
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40004400 	.word	0x40004400
 8000994:	40021000 	.word	0x40021000
 8000998:	40010800 	.word	0x40010800

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <HardFault_Handler+0x4>

080009ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <MemManage_Handler+0x4>

080009b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <BusFault_Handler+0x4>

080009ba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <UsageFault_Handler+0x4>

080009c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr

080009e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	k++;
 80009e8:	4b31      	ldr	r3, [pc, #196]	; (8000ab0 <SysTick_Handler+0xcc>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	3301      	adds	r3, #1
 80009ee:	4a30      	ldr	r2, [pc, #192]	; (8000ab0 <SysTick_Handler+0xcc>)
 80009f0:	6013      	str	r3, [r2, #0]

	if (k == 10) {
 80009f2:	4b2f      	ldr	r3, [pc, #188]	; (8000ab0 <SysTick_Handler+0xcc>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b0a      	cmp	r3, #10
 80009f8:	d156      	bne.n	8000aa8 <SysTick_Handler+0xc4>

			keys.button1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80009fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009fe:	482d      	ldr	r0, [pc, #180]	; (8000ab4 <SysTick_Handler+0xd0>)
 8000a00:	f000 fea4 	bl	800174c <HAL_GPIO_ReadPin>
 8000a04:	4603      	mov	r3, r0
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	b2d9      	uxtb	r1, r3
 8000a0c:	4a2a      	ldr	r2, [pc, #168]	; (8000ab8 <SysTick_Handler+0xd4>)
 8000a0e:	7813      	ldrb	r3, [r2, #0]
 8000a10:	f361 0300 	bfi	r3, r1, #0, #1
 8000a14:	7013      	strb	r3, [r2, #0]
			keys.button2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8000a16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a1a:	4826      	ldr	r0, [pc, #152]	; (8000ab4 <SysTick_Handler+0xd0>)
 8000a1c:	f000 fe96 	bl	800174c <HAL_GPIO_ReadPin>
 8000a20:	4603      	mov	r3, r0
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	b2d9      	uxtb	r1, r3
 8000a28:	4a23      	ldr	r2, [pc, #140]	; (8000ab8 <SysTick_Handler+0xd4>)
 8000a2a:	7813      	ldrb	r3, [r2, #0]
 8000a2c:	f361 0341 	bfi	r3, r1, #1, #1
 8000a30:	7013      	strb	r3, [r2, #0]
			keys.button3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8000a32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a36:	4821      	ldr	r0, [pc, #132]	; (8000abc <SysTick_Handler+0xd8>)
 8000a38:	f000 fe88 	bl	800174c <HAL_GPIO_ReadPin>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	b2d9      	uxtb	r1, r3
 8000a44:	4a1c      	ldr	r2, [pc, #112]	; (8000ab8 <SysTick_Handler+0xd4>)
 8000a46:	7813      	ldrb	r3, [r2, #0]
 8000a48:	f361 0382 	bfi	r3, r1, #2, #1
 8000a4c:	7013      	strb	r3, [r2, #0]
			keys.button4 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8000a4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a52:	481a      	ldr	r0, [pc, #104]	; (8000abc <SysTick_Handler+0xd8>)
 8000a54:	f000 fe7a 	bl	800174c <HAL_GPIO_ReadPin>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	b2d9      	uxtb	r1, r3
 8000a60:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <SysTick_Handler+0xd4>)
 8000a62:	7813      	ldrb	r3, [r2, #0]
 8000a64:	f361 03c3 	bfi	r3, r1, #3, #1
 8000a68:	7013      	strb	r3, [r2, #0]

			keys.sensor1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8000a6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6e:	4811      	ldr	r0, [pc, #68]	; (8000ab4 <SysTick_Handler+0xd0>)
 8000a70:	f000 fe6c 	bl	800174c <HAL_GPIO_ReadPin>
 8000a74:	4603      	mov	r3, r0
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	b2d9      	uxtb	r1, r3
 8000a7c:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <SysTick_Handler+0xd4>)
 8000a7e:	7813      	ldrb	r3, [r2, #0]
 8000a80:	f361 1304 	bfi	r3, r1, #4, #1
 8000a84:	7013      	strb	r3, [r2, #0]
			keys.sensor2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8000a86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a8a:	480a      	ldr	r0, [pc, #40]	; (8000ab4 <SysTick_Handler+0xd0>)
 8000a8c:	f000 fe5e 	bl	800174c <HAL_GPIO_ReadPin>
 8000a90:	4603      	mov	r3, r0
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	b2d9      	uxtb	r1, r3
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <SysTick_Handler+0xd4>)
 8000a9a:	7813      	ldrb	r3, [r2, #0]
 8000a9c:	f361 1345 	bfi	r3, r1, #5, #1
 8000aa0:	7013      	strb	r3, [r2, #0]

			k = 0;
 8000aa2:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <SysTick_Handler+0xcc>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa8:	f000 f93c 	bl	8000d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200000d8 	.word	0x200000d8
 8000ab4:	40010c00 	.word	0x40010c00
 8000ab8:	200000dc 	.word	0x200000dc
 8000abc:	40010800 	.word	0x40010800

08000ac0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <USART2_IRQHandler+0x10>)
 8000ad2:	f002 f931 	bl	8002d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000098 	.word	0x20000098

08000ae0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	switch (rx_flag) {
 8000ae8:	4b47      	ldr	r3, [pc, #284]	; (8000c08 <HAL_UART_RxCpltCallback+0x128>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d018      	beq.n	8000b22 <HAL_UART_RxCpltCallback+0x42>
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d046      	beq.n	8000b82 <HAL_UART_RxCpltCallback+0xa2>
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d000      	beq.n	8000afa <HAL_UART_RxCpltCallback+0x1a>
		rx_flag = 0;
		HAL_UART_Receive_IT(&huart2, rx_array, 1);
	}
		break;
	};
}
 8000af8:	e082      	b.n	8000c00 <HAL_UART_RxCpltCallback+0x120>
		if (rx_array[0] == START_BYTE) {
 8000afa:	4b44      	ldr	r3, [pc, #272]	; (8000c0c <HAL_UART_RxCpltCallback+0x12c>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2baa      	cmp	r3, #170	; 0xaa
 8000b00:	d109      	bne.n	8000b16 <HAL_UART_RxCpltCallback+0x36>
			rx_flag = 1;
 8000b02:	4b41      	ldr	r3, [pc, #260]	; (8000c08 <HAL_UART_RxCpltCallback+0x128>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, rx_array + 1, 1);
 8000b08:	4b41      	ldr	r3, [pc, #260]	; (8000c10 <HAL_UART_RxCpltCallback+0x130>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4841      	ldr	r0, [pc, #260]	; (8000c14 <HAL_UART_RxCpltCallback+0x134>)
 8000b10:	f002 f8bd 	bl	8002c8e <HAL_UART_Receive_IT>
		break;
 8000b14:	e074      	b.n	8000c00 <HAL_UART_RxCpltCallback+0x120>
			HAL_UART_Receive_IT(&huart2, rx_array, 1);
 8000b16:	2201      	movs	r2, #1
 8000b18:	493c      	ldr	r1, [pc, #240]	; (8000c0c <HAL_UART_RxCpltCallback+0x12c>)
 8000b1a:	483e      	ldr	r0, [pc, #248]	; (8000c14 <HAL_UART_RxCpltCallback+0x134>)
 8000b1c:	f002 f8b7 	bl	8002c8e <HAL_UART_Receive_IT>
		break;
 8000b20:	e06e      	b.n	8000c00 <HAL_UART_RxCpltCallback+0x120>
		switch (rx_array[1]) {
 8000b22:	4b3a      	ldr	r3, [pc, #232]	; (8000c0c <HAL_UART_RxCpltCallback+0x12c>)
 8000b24:	785b      	ldrb	r3, [r3, #1]
 8000b26:	2b03      	cmp	r3, #3
 8000b28:	d00d      	beq.n	8000b46 <HAL_UART_RxCpltCallback+0x66>
 8000b2a:	2baa      	cmp	r3, #170	; 0xaa
 8000b2c:	d015      	beq.n	8000b5a <HAL_UART_RxCpltCallback+0x7a>
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d11d      	bne.n	8000b6e <HAL_UART_RxCpltCallback+0x8e>
			rx_flag = 2;
 8000b32:	4b35      	ldr	r3, [pc, #212]	; (8000c08 <HAL_UART_RxCpltCallback+0x128>)
 8000b34:	2202      	movs	r2, #2
 8000b36:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, rx_array + 2,
 8000b38:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <HAL_UART_RxCpltCallback+0x138>)
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4835      	ldr	r0, [pc, #212]	; (8000c14 <HAL_UART_RxCpltCallback+0x134>)
 8000b40:	f002 f8a5 	bl	8002c8e <HAL_UART_Receive_IT>
			break;
 8000b44:	e01c      	b.n	8000b80 <HAL_UART_RxCpltCallback+0xa0>
			rx_flag = 2;
 8000b46:	4b30      	ldr	r3, [pc, #192]	; (8000c08 <HAL_UART_RxCpltCallback+0x128>)
 8000b48:	2202      	movs	r2, #2
 8000b4a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, rx_array + 2,
 8000b4c:	4b32      	ldr	r3, [pc, #200]	; (8000c18 <HAL_UART_RxCpltCallback+0x138>)
 8000b4e:	2210      	movs	r2, #16
 8000b50:	4619      	mov	r1, r3
 8000b52:	4830      	ldr	r0, [pc, #192]	; (8000c14 <HAL_UART_RxCpltCallback+0x134>)
 8000b54:	f002 f89b 	bl	8002c8e <HAL_UART_Receive_IT>
			break;
 8000b58:	e012      	b.n	8000b80 <HAL_UART_RxCpltCallback+0xa0>
			rx_flag = 2;
 8000b5a:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <HAL_UART_RxCpltCallback+0x128>)
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, rx_array + 2, DEVICES_REQUEST_LENGTH - 2);
 8000b60:	4b2d      	ldr	r3, [pc, #180]	; (8000c18 <HAL_UART_RxCpltCallback+0x138>)
 8000b62:	2205      	movs	r2, #5
 8000b64:	4619      	mov	r1, r3
 8000b66:	482b      	ldr	r0, [pc, #172]	; (8000c14 <HAL_UART_RxCpltCallback+0x134>)
 8000b68:	f002 f891 	bl	8002c8e <HAL_UART_Receive_IT>
			break;
 8000b6c:	e008      	b.n	8000b80 <HAL_UART_RxCpltCallback+0xa0>
			rx_flag = 0;
 8000b6e:	4b26      	ldr	r3, [pc, #152]	; (8000c08 <HAL_UART_RxCpltCallback+0x128>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, rx_array, 1);
 8000b74:	2201      	movs	r2, #1
 8000b76:	4925      	ldr	r1, [pc, #148]	; (8000c0c <HAL_UART_RxCpltCallback+0x12c>)
 8000b78:	4826      	ldr	r0, [pc, #152]	; (8000c14 <HAL_UART_RxCpltCallback+0x134>)
 8000b7a:	f002 f888 	bl	8002c8e <HAL_UART_Receive_IT>
			break;
 8000b7e:	bf00      	nop
		break;
 8000b80:	e03e      	b.n	8000c00 <HAL_UART_RxCpltCallback+0x120>
		switch (rx_array[1]) {
 8000b82:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <HAL_UART_RxCpltCallback+0x12c>)
 8000b84:	785b      	ldrb	r3, [r3, #1]
 8000b86:	2b03      	cmp	r3, #3
 8000b88:	d00f      	beq.n	8000baa <HAL_UART_RxCpltCallback+0xca>
 8000b8a:	2baa      	cmp	r3, #170	; 0xaa
 8000b8c:	d020      	beq.n	8000bd0 <HAL_UART_RxCpltCallback+0xf0>
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d12d      	bne.n	8000bee <HAL_UART_RxCpltCallback+0x10e>
			if (parse_normal_package(&esc_struct, rx_array)) {
 8000b92:	491e      	ldr	r1, [pc, #120]	; (8000c0c <HAL_UART_RxCpltCallback+0x12c>)
 8000b94:	4821      	ldr	r0, [pc, #132]	; (8000c1c <HAL_UART_RxCpltCallback+0x13c>)
 8000b96:	f7ff fb2a 	bl	80001ee <parse_normal_package>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d023      	beq.n	8000be8 <HAL_UART_RxCpltCallback+0x108>
				normal_response(&huart2, &esc_struct);
 8000ba0:	491e      	ldr	r1, [pc, #120]	; (8000c1c <HAL_UART_RxCpltCallback+0x13c>)
 8000ba2:	481c      	ldr	r0, [pc, #112]	; (8000c14 <HAL_UART_RxCpltCallback+0x134>)
 8000ba4:	f7ff fb4a 	bl	800023c <normal_response>
			break;
 8000ba8:	e01e      	b.n	8000be8 <HAL_UART_RxCpltCallback+0x108>
			uint8_t current_adress = esc_struct.device_adress;
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <HAL_UART_RxCpltCallback+0x13c>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	73fb      	strb	r3, [r7, #15]
			if (parse_config_package(&esc_struct, rx_array)) {
 8000bb0:	4916      	ldr	r1, [pc, #88]	; (8000c0c <HAL_UART_RxCpltCallback+0x12c>)
 8000bb2:	481a      	ldr	r0, [pc, #104]	; (8000c1c <HAL_UART_RxCpltCallback+0x13c>)
 8000bb4:	f7ff fbe4 	bl	8000380 <parse_config_package>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d016      	beq.n	8000bec <HAL_UART_RxCpltCallback+0x10c>
				if (esc_struct.device_adress != current_adress) {
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <HAL_UART_RxCpltCallback+0x13c>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	7bfa      	ldrb	r2, [r7, #15]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d011      	beq.n	8000bec <HAL_UART_RxCpltCallback+0x10c>
					FLASH_WriteSettings(&esc_struct);
 8000bc8:	4814      	ldr	r0, [pc, #80]	; (8000c1c <HAL_UART_RxCpltCallback+0x13c>)
 8000bca:	f7ff fc27 	bl	800041c <FLASH_WriteSettings>
			break;
 8000bce:	e00d      	b.n	8000bec <HAL_UART_RxCpltCallback+0x10c>
			if(parse_device_package(&esc_struct, rx_array))
 8000bd0:	490e      	ldr	r1, [pc, #56]	; (8000c0c <HAL_UART_RxCpltCallback+0x12c>)
 8000bd2:	4812      	ldr	r0, [pc, #72]	; (8000c1c <HAL_UART_RxCpltCallback+0x13c>)
 8000bd4:	f7ff fb68 	bl	80002a8 <parse_device_package>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d007      	beq.n	8000bee <HAL_UART_RxCpltCallback+0x10e>
				device_response(&huart2, &esc_struct);
 8000bde:	490f      	ldr	r1, [pc, #60]	; (8000c1c <HAL_UART_RxCpltCallback+0x13c>)
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <HAL_UART_RxCpltCallback+0x134>)
 8000be2:	f7ff fb89 	bl	80002f8 <device_response>
 8000be6:	e002      	b.n	8000bee <HAL_UART_RxCpltCallback+0x10e>
			break;
 8000be8:	bf00      	nop
 8000bea:	e000      	b.n	8000bee <HAL_UART_RxCpltCallback+0x10e>
			break;
 8000bec:	bf00      	nop
		rx_flag = 0;
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_UART_RxCpltCallback+0x128>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, rx_array, 1);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	4905      	ldr	r1, [pc, #20]	; (8000c0c <HAL_UART_RxCpltCallback+0x12c>)
 8000bf8:	4806      	ldr	r0, [pc, #24]	; (8000c14 <HAL_UART_RxCpltCallback+0x134>)
 8000bfa:	f002 f848 	bl	8002c8e <HAL_UART_Receive_IT>
		break;
 8000bfe:	bf00      	nop
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000036 	.word	0x20000036
 8000c0c:	20000038 	.word	0x20000038
 8000c10:	20000039 	.word	0x20000039
 8000c14:	20000098 	.word	0x20000098
 8000c18:	2000003a 	.word	0x2000003a
 8000c1c:	2000004c 	.word	0x2000004c

08000c20 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RS_485_DIR_GPIO_Port, RS_485_DIR_Pin, RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2102      	movs	r1, #2
 8000c2c:	4803      	ldr	r0, [pc, #12]	; (8000c3c <HAL_UART_TxCpltCallback+0x1c>)
 8000c2e:	f000 fda4 	bl	800177a <HAL_GPIO_WritePin>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40010800 	.word	0x40010800

08000c40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr

08000c4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c4c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c4e:	e003      	b.n	8000c58 <LoopCopyDataInit>

08000c50 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000c52:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c54:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c56:	3104      	adds	r1, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c58:	480a      	ldr	r0, [pc, #40]	; (8000c84 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c5c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c5e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c60:	d3f6      	bcc.n	8000c50 <CopyDataInit>
  ldr r2, =_sbss
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c64:	e002      	b.n	8000c6c <LoopFillZerobss>

08000c66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c68:	f842 3b04 	str.w	r3, [r2], #4

08000c6c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c6e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c70:	d3f9      	bcc.n	8000c66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c72:	f7ff ffe5 	bl	8000c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c76:	f002 fb0f 	bl	8003298 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c7a:	f7ff fc11 	bl	80004a0 <main>
  bx lr
 8000c7e:	4770      	bx	lr
  ldr r3, =_sidata
 8000c80:	08003354 	.word	0x08003354
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c88:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000c8c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000c90:	20000108 	.word	0x20000108

08000c94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC1_2_IRQHandler>
	...

08000c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_Init+0x28>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <HAL_Init+0x28>)
 8000ca2:	f043 0310 	orr.w	r3, r3, #16
 8000ca6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 f945 	bl	8000f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f000 f808 	bl	8000cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb4:	f7ff fd96 	bl	80007e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40022000 	.word	0x40022000

08000cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_InitTick+0x54>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_InitTick+0x58>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f95d 	bl	8000fa2 <HAL_SYSTICK_Config>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00e      	b.n	8000d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b0f      	cmp	r3, #15
 8000cf6:	d80a      	bhi.n	8000d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	f000 f925 	bl	8000f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <HAL_InitTick+0x5c>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e000      	b.n	8000d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000004 	.word	0x20000004

08000d24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <HAL_IncTick+0x1c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <HAL_IncTick+0x20>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	4a03      	ldr	r2, [pc, #12]	; (8000d44 <HAL_IncTick+0x20>)
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	20000008 	.word	0x20000008
 8000d44:	200000e0 	.word	0x200000e0

08000d48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d4c:	4b02      	ldr	r3, [pc, #8]	; (8000d58 <HAL_GetTick+0x10>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	200000e0 	.word	0x200000e0

08000d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d64:	f7ff fff0 	bl	8000d48 <HAL_GetTick>
 8000d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d74:	d005      	beq.n	8000d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_Delay+0x40>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4413      	add	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d82:	bf00      	nop
 8000d84:	f7ff ffe0 	bl	8000d48 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d8f7      	bhi.n	8000d84 <HAL_Delay+0x28>
  {
  }
}
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000008 	.word	0x20000008

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4906      	ldr	r1, [pc, #24]	; (8000e38 <__NVIC_EnableIRQ+0x34>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db0a      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	490c      	ldr	r1, [pc, #48]	; (8000e88 <__NVIC_SetPriority+0x4c>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	440b      	add	r3, r1
 8000e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e64:	e00a      	b.n	8000e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4908      	ldr	r1, [pc, #32]	; (8000e8c <__NVIC_SetPriority+0x50>)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	3b04      	subs	r3, #4
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	; 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf28      	it	cs
 8000eae:	2304      	movcs	r3, #4
 8000eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d902      	bls.n	8000ec0 <NVIC_EncodePriority+0x30>
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3b03      	subs	r3, #3
 8000ebe:	e000      	b.n	8000ec2 <NVIC_EncodePriority+0x32>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4313      	orrs	r3, r2
         );
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	; 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f04:	d301      	bcc.n	8000f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00f      	b.n	8000f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <SysTick_Config+0x40>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f12:	210f      	movs	r1, #15
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f7ff ff90 	bl	8000e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <SysTick_Config+0x40>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f22:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <SysTick_Config+0x40>)
 8000f24:	2207      	movs	r2, #7
 8000f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	e000e010 	.word	0xe000e010

08000f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ff2d 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f60:	f7ff ff42 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	6978      	ldr	r0, [r7, #20]
 8000f6c:	f7ff ff90 	bl	8000e90 <NVIC_EncodePriority>
 8000f70:	4602      	mov	r2, r0
 8000f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff5f 	bl	8000e3c <__NVIC_SetPriority>
}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff35 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ffa2 	bl	8000ef4 <SysTick_Config>
 8000fb0:	4603      	mov	r3, r0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d005      	beq.n	8000fde <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e051      	b.n	8001082 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f022 020e 	bic.w	r2, r2, #14
 8000fec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f022 0201 	bic.w	r2, r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a22      	ldr	r2, [pc, #136]	; (800108c <HAL_DMA_Abort_IT+0xd0>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d029      	beq.n	800105c <HAL_DMA_Abort_IT+0xa0>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a20      	ldr	r2, [pc, #128]	; (8001090 <HAL_DMA_Abort_IT+0xd4>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d022      	beq.n	8001058 <HAL_DMA_Abort_IT+0x9c>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <HAL_DMA_Abort_IT+0xd8>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d01a      	beq.n	8001052 <HAL_DMA_Abort_IT+0x96>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a1d      	ldr	r2, [pc, #116]	; (8001098 <HAL_DMA_Abort_IT+0xdc>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d012      	beq.n	800104c <HAL_DMA_Abort_IT+0x90>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a1c      	ldr	r2, [pc, #112]	; (800109c <HAL_DMA_Abort_IT+0xe0>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d00a      	beq.n	8001046 <HAL_DMA_Abort_IT+0x8a>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a1a      	ldr	r2, [pc, #104]	; (80010a0 <HAL_DMA_Abort_IT+0xe4>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d102      	bne.n	8001040 <HAL_DMA_Abort_IT+0x84>
 800103a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800103e:	e00e      	b.n	800105e <HAL_DMA_Abort_IT+0xa2>
 8001040:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001044:	e00b      	b.n	800105e <HAL_DMA_Abort_IT+0xa2>
 8001046:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800104a:	e008      	b.n	800105e <HAL_DMA_Abort_IT+0xa2>
 800104c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001050:	e005      	b.n	800105e <HAL_DMA_Abort_IT+0xa2>
 8001052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001056:	e002      	b.n	800105e <HAL_DMA_Abort_IT+0xa2>
 8001058:	2310      	movs	r3, #16
 800105a:	e000      	b.n	800105e <HAL_DMA_Abort_IT+0xa2>
 800105c:	2301      	movs	r3, #1
 800105e:	4a11      	ldr	r2, [pc, #68]	; (80010a4 <HAL_DMA_Abort_IT+0xe8>)
 8001060:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2201      	movs	r2, #1
 8001066:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	4798      	blx	r3
    } 
  }
  return status;
 8001082:	7bfb      	ldrb	r3, [r7, #15]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40020008 	.word	0x40020008
 8001090:	4002001c 	.word	0x4002001c
 8001094:	40020030 	.word	0x40020030
 8001098:	40020044 	.word	0x40020044
 800109c:	40020058 	.word	0x40020058
 80010a0:	4002006c 	.word	0x4002006c
 80010a4:	40020000 	.word	0x40020000

080010a8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80010a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010aa:	b087      	sub	sp, #28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80010c2:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <HAL_FLASH_Program+0xd8>)
 80010c4:	7e1b      	ldrb	r3, [r3, #24]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d101      	bne.n	80010ce <HAL_FLASH_Program+0x26>
 80010ca:	2302      	movs	r3, #2
 80010cc:	e054      	b.n	8001178 <HAL_FLASH_Program+0xd0>
 80010ce:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <HAL_FLASH_Program+0xd8>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80010d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010d8:	f000 f8a8 	bl	800122c <FLASH_WaitForLastOperation>
 80010dc:	4603      	mov	r3, r0
 80010de:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80010e0:	7dfb      	ldrb	r3, [r7, #23]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d144      	bne.n	8001170 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d102      	bne.n	80010f2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80010ec:	2301      	movs	r3, #1
 80010ee:	757b      	strb	r3, [r7, #21]
 80010f0:	e007      	b.n	8001102 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d102      	bne.n	80010fe <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80010f8:	2302      	movs	r3, #2
 80010fa:	757b      	strb	r3, [r7, #21]
 80010fc:	e001      	b.n	8001102 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80010fe:	2304      	movs	r3, #4
 8001100:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001102:	2300      	movs	r3, #0
 8001104:	75bb      	strb	r3, [r7, #22]
 8001106:	e02d      	b.n	8001164 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001108:	7dbb      	ldrb	r3, [r7, #22]
 800110a:	005a      	lsls	r2, r3, #1
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	eb02 0c03 	add.w	ip, r2, r3
 8001112:	7dbb      	ldrb	r3, [r7, #22]
 8001114:	0119      	lsls	r1, r3, #4
 8001116:	e9d7 2300 	ldrd	r2, r3, [r7]
 800111a:	f1c1 0620 	rsb	r6, r1, #32
 800111e:	f1a1 0020 	sub.w	r0, r1, #32
 8001122:	fa22 f401 	lsr.w	r4, r2, r1
 8001126:	fa03 f606 	lsl.w	r6, r3, r6
 800112a:	4334      	orrs	r4, r6
 800112c:	fa23 f000 	lsr.w	r0, r3, r0
 8001130:	4304      	orrs	r4, r0
 8001132:	fa23 f501 	lsr.w	r5, r3, r1
 8001136:	b2a3      	uxth	r3, r4
 8001138:	4619      	mov	r1, r3
 800113a:	4660      	mov	r0, ip
 800113c:	f000 f85a 	bl	80011f4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001140:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001144:	f000 f872 	bl	800122c <FLASH_WaitForLastOperation>
 8001148:	4603      	mov	r3, r0
 800114a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_FLASH_Program+0xdc>)
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	4a0c      	ldr	r2, [pc, #48]	; (8001184 <HAL_FLASH_Program+0xdc>)
 8001152:	f023 0301 	bic.w	r3, r3, #1
 8001156:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001158:	7dfb      	ldrb	r3, [r7, #23]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d107      	bne.n	800116e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800115e:	7dbb      	ldrb	r3, [r7, #22]
 8001160:	3301      	adds	r3, #1
 8001162:	75bb      	strb	r3, [r7, #22]
 8001164:	7dba      	ldrb	r2, [r7, #22]
 8001166:	7d7b      	ldrb	r3, [r7, #21]
 8001168:	429a      	cmp	r2, r3
 800116a:	d3cd      	bcc.n	8001108 <HAL_FLASH_Program+0x60>
 800116c:	e000      	b.n	8001170 <HAL_FLASH_Program+0xc8>
      {
        break;
 800116e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_FLASH_Program+0xd8>)
 8001172:	2200      	movs	r2, #0
 8001174:	761a      	strb	r2, [r3, #24]

  return status;
 8001176:	7dfb      	ldrb	r3, [r7, #23]
}
 8001178:	4618      	mov	r0, r3
 800117a:	371c      	adds	r7, #28
 800117c:	46bd      	mov	sp, r7
 800117e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001180:	200000e8 	.word	0x200000e8
 8001184:	40022000 	.word	0x40022000

08001188 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001192:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <HAL_FLASH_Unlock+0x40>)
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00d      	beq.n	80011ba <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_FLASH_Unlock+0x40>)
 80011a0:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <HAL_FLASH_Unlock+0x44>)
 80011a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <HAL_FLASH_Unlock+0x40>)
 80011a6:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <HAL_FLASH_Unlock+0x48>)
 80011a8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80011aa:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <HAL_FLASH_Unlock+0x40>)
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80011ba:	79fb      	ldrb	r3, [r7, #7]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40022000 	.word	0x40022000
 80011cc:	45670123 	.word	0x45670123
 80011d0:	cdef89ab 	.word	0xcdef89ab

080011d4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HAL_FLASH_Lock+0x1c>)
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <HAL_FLASH_Lock+0x1c>)
 80011de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40022000 	.word	0x40022000

080011f4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <FLASH_Program_HalfWord+0x30>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <FLASH_Program_HalfWord+0x34>)
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	4a07      	ldr	r2, [pc, #28]	; (8001228 <FLASH_Program_HalfWord+0x34>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	887a      	ldrh	r2, [r7, #2]
 8001216:	801a      	strh	r2, [r3, #0]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	200000e8 	.word	0x200000e8
 8001228:	40022000 	.word	0x40022000

0800122c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff fd88 	bl	8000d48 <HAL_GetTick>
 8001238:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800123a:	e010      	b.n	800125e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001242:	d00c      	beq.n	800125e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d007      	beq.n	800125a <FLASH_WaitForLastOperation+0x2e>
 800124a:	f7ff fd7d 	bl	8000d48 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	429a      	cmp	r2, r3
 8001258:	d201      	bcs.n	800125e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e025      	b.n	80012aa <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <FLASH_WaitForLastOperation+0x88>)
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1e8      	bne.n	800123c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <FLASH_WaitForLastOperation+0x88>)
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	f003 0320 	and.w	r3, r3, #32
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <FLASH_WaitForLastOperation+0x88>)
 8001278:	2220      	movs	r2, #32
 800127a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800127c:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <FLASH_WaitForLastOperation+0x88>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	f003 0310 	and.w	r3, r3, #16
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10b      	bne.n	80012a0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <FLASH_WaitForLastOperation+0x88>)
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001290:	2b00      	cmp	r3, #0
 8001292:	d105      	bne.n	80012a0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <FLASH_WaitForLastOperation+0x88>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80012a0:	f000 f80a 	bl	80012b8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40022000 	.word	0x40022000

080012b8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80012c2:	4b23      	ldr	r3, [pc, #140]	; (8001350 <FLASH_SetErrorCode+0x98>)
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	f003 0310 	and.w	r3, r3, #16
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d009      	beq.n	80012e2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80012ce:	4b21      	ldr	r3, [pc, #132]	; (8001354 <FLASH_SetErrorCode+0x9c>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	f043 0302 	orr.w	r3, r3, #2
 80012d6:	4a1f      	ldr	r2, [pc, #124]	; (8001354 <FLASH_SetErrorCode+0x9c>)
 80012d8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f043 0310 	orr.w	r3, r3, #16
 80012e0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80012e2:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <FLASH_SetErrorCode+0x98>)
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d009      	beq.n	8001302 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <FLASH_SetErrorCode+0x9c>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	4a17      	ldr	r2, [pc, #92]	; (8001354 <FLASH_SetErrorCode+0x9c>)
 80012f8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <FLASH_SetErrorCode+0x98>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b00      	cmp	r3, #0
 800130c:	d00b      	beq.n	8001326 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <FLASH_SetErrorCode+0x9c>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <FLASH_SetErrorCode+0x9c>)
 8001318:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <FLASH_SetErrorCode+0x98>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	4a0c      	ldr	r2, [pc, #48]	; (8001350 <FLASH_SetErrorCode+0x98>)
 8001320:	f023 0301 	bic.w	r3, r3, #1
 8001324:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f240 1201 	movw	r2, #257	; 0x101
 800132c:	4293      	cmp	r3, r2
 800132e:	d106      	bne.n	800133e <FLASH_SetErrorCode+0x86>
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <FLASH_SetErrorCode+0x98>)
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <FLASH_SetErrorCode+0x98>)
 8001336:	f023 0301 	bic.w	r3, r3, #1
 800133a:	61d3      	str	r3, [r2, #28]
}  
 800133c:	e002      	b.n	8001344 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800133e:	4a04      	ldr	r2, [pc, #16]	; (8001350 <FLASH_SetErrorCode+0x98>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	60d3      	str	r3, [r2, #12]
}  
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40022000 	.word	0x40022000
 8001354:	200000e8 	.word	0x200000e8

08001358 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800136a:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <HAL_FLASHEx_Erase+0xd0>)
 800136c:	7e1b      	ldrb	r3, [r3, #24]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d101      	bne.n	8001376 <HAL_FLASHEx_Erase+0x1e>
 8001372:	2302      	movs	r3, #2
 8001374:	e053      	b.n	800141e <HAL_FLASHEx_Erase+0xc6>
 8001376:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <HAL_FLASHEx_Erase+0xd0>)
 8001378:	2201      	movs	r2, #1
 800137a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b02      	cmp	r3, #2
 8001382:	d116      	bne.n	80013b2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001384:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001388:	f7ff ff50 	bl	800122c <FLASH_WaitForLastOperation>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d141      	bne.n	8001416 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001392:	2001      	movs	r0, #1
 8001394:	f000 f84c 	bl	8001430 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001398:	f24c 3050 	movw	r0, #50000	; 0xc350
 800139c:	f7ff ff46 	bl	800122c <FLASH_WaitForLastOperation>
 80013a0:	4603      	mov	r3, r0
 80013a2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80013a4:	4b21      	ldr	r3, [pc, #132]	; (800142c <HAL_FLASHEx_Erase+0xd4>)
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	4a20      	ldr	r2, [pc, #128]	; (800142c <HAL_FLASHEx_Erase+0xd4>)
 80013aa:	f023 0304 	bic.w	r3, r3, #4
 80013ae:	6113      	str	r3, [r2, #16]
 80013b0:	e031      	b.n	8001416 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80013b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013b6:	f7ff ff39 	bl	800122c <FLASH_WaitForLastOperation>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d12a      	bne.n	8001416 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	f04f 32ff 	mov.w	r2, #4294967295
 80013c6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	e019      	b.n	8001404 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80013d0:	68b8      	ldr	r0, [r7, #8]
 80013d2:	f000 f849 	bl	8001468 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013da:	f7ff ff27 	bl	800122c <FLASH_WaitForLastOperation>
 80013de:	4603      	mov	r3, r0
 80013e0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_FLASHEx_Erase+0xd4>)
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	4a11      	ldr	r2, [pc, #68]	; (800142c <HAL_FLASHEx_Erase+0xd4>)
 80013e8:	f023 0302 	bic.w	r3, r3, #2
 80013ec:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	601a      	str	r2, [r3, #0]
            break;
 80013fa:	e00c      	b.n	8001416 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001402:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	029a      	lsls	r2, r3, #10
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	429a      	cmp	r2, r3
 8001414:	d3dc      	bcc.n	80013d0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <HAL_FLASHEx_Erase+0xd0>)
 8001418:	2200      	movs	r2, #0
 800141a:	761a      	strb	r2, [r3, #24]

  return status;
 800141c:	7bfb      	ldrb	r3, [r7, #15]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200000e8 	.word	0x200000e8
 800142c:	40022000 	.word	0x40022000

08001430 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <FLASH_MassErase+0x30>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <FLASH_MassErase+0x34>)
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	4a08      	ldr	r2, [pc, #32]	; (8001464 <FLASH_MassErase+0x34>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <FLASH_MassErase+0x34>)
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <FLASH_MassErase+0x34>)
 8001450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001454:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	200000e8 	.word	0x200000e8
 8001464:	40022000 	.word	0x40022000

08001468 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <FLASH_PageErase+0x38>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <FLASH_PageErase+0x3c>)
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <FLASH_PageErase+0x3c>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001482:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <FLASH_PageErase+0x3c>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <FLASH_PageErase+0x3c>)
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <FLASH_PageErase+0x3c>)
 800148e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001492:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	200000e8 	.word	0x200000e8
 80014a4:	40022000 	.word	0x40022000

080014a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b08b      	sub	sp, #44	; 0x2c
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ba:	e121      	b.n	8001700 <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014bc:	2201      	movs	r2, #1
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	f040 8110 	bne.w	80016fa <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b12      	cmp	r3, #18
 80014e0:	d034      	beq.n	800154c <HAL_GPIO_Init+0xa4>
 80014e2:	2b12      	cmp	r3, #18
 80014e4:	d80d      	bhi.n	8001502 <HAL_GPIO_Init+0x5a>
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d02b      	beq.n	8001542 <HAL_GPIO_Init+0x9a>
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d804      	bhi.n	80014f8 <HAL_GPIO_Init+0x50>
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d031      	beq.n	8001556 <HAL_GPIO_Init+0xae>
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d01c      	beq.n	8001530 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014f6:	e048      	b.n	800158a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014f8:	2b03      	cmp	r3, #3
 80014fa:	d043      	beq.n	8001584 <HAL_GPIO_Init+0xdc>
 80014fc:	2b11      	cmp	r3, #17
 80014fe:	d01b      	beq.n	8001538 <HAL_GPIO_Init+0x90>
          break;
 8001500:	e043      	b.n	800158a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001502:	4a86      	ldr	r2, [pc, #536]	; (800171c <HAL_GPIO_Init+0x274>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d026      	beq.n	8001556 <HAL_GPIO_Init+0xae>
 8001508:	4a84      	ldr	r2, [pc, #528]	; (800171c <HAL_GPIO_Init+0x274>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d806      	bhi.n	800151c <HAL_GPIO_Init+0x74>
 800150e:	4a84      	ldr	r2, [pc, #528]	; (8001720 <HAL_GPIO_Init+0x278>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d020      	beq.n	8001556 <HAL_GPIO_Init+0xae>
 8001514:	4a83      	ldr	r2, [pc, #524]	; (8001724 <HAL_GPIO_Init+0x27c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d01d      	beq.n	8001556 <HAL_GPIO_Init+0xae>
          break;
 800151a:	e036      	b.n	800158a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800151c:	4a82      	ldr	r2, [pc, #520]	; (8001728 <HAL_GPIO_Init+0x280>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d019      	beq.n	8001556 <HAL_GPIO_Init+0xae>
 8001522:	4a82      	ldr	r2, [pc, #520]	; (800172c <HAL_GPIO_Init+0x284>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d016      	beq.n	8001556 <HAL_GPIO_Init+0xae>
 8001528:	4a81      	ldr	r2, [pc, #516]	; (8001730 <HAL_GPIO_Init+0x288>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d013      	beq.n	8001556 <HAL_GPIO_Init+0xae>
          break;
 800152e:	e02c      	b.n	800158a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	623b      	str	r3, [r7, #32]
          break;
 8001536:	e028      	b.n	800158a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	3304      	adds	r3, #4
 800153e:	623b      	str	r3, [r7, #32]
          break;
 8001540:	e023      	b.n	800158a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	3308      	adds	r3, #8
 8001548:	623b      	str	r3, [r7, #32]
          break;
 800154a:	e01e      	b.n	800158a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	330c      	adds	r3, #12
 8001552:	623b      	str	r3, [r7, #32]
          break;
 8001554:	e019      	b.n	800158a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d102      	bne.n	8001564 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800155e:	2304      	movs	r3, #4
 8001560:	623b      	str	r3, [r7, #32]
          break;
 8001562:	e012      	b.n	800158a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d105      	bne.n	8001578 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800156c:	2308      	movs	r3, #8
 800156e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	611a      	str	r2, [r3, #16]
          break;
 8001576:	e008      	b.n	800158a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001578:	2308      	movs	r3, #8
 800157a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	615a      	str	r2, [r3, #20]
          break;
 8001582:	e002      	b.n	800158a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001584:	2300      	movs	r3, #0
 8001586:	623b      	str	r3, [r7, #32]
          break;
 8001588:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	2bff      	cmp	r3, #255	; 0xff
 800158e:	d801      	bhi.n	8001594 <HAL_GPIO_Init+0xec>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	e001      	b.n	8001598 <HAL_GPIO_Init+0xf0>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3304      	adds	r3, #4
 8001598:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	2bff      	cmp	r3, #255	; 0xff
 800159e:	d802      	bhi.n	80015a6 <HAL_GPIO_Init+0xfe>
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	e002      	b.n	80015ac <HAL_GPIO_Init+0x104>
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	3b08      	subs	r3, #8
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	210f      	movs	r1, #15
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	401a      	ands	r2, r3
 80015be:	6a39      	ldr	r1, [r7, #32]
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	431a      	orrs	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 8090 	beq.w	80016fa <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015da:	4b56      	ldr	r3, [pc, #344]	; (8001734 <HAL_GPIO_Init+0x28c>)
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	4a55      	ldr	r2, [pc, #340]	; (8001734 <HAL_GPIO_Init+0x28c>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6193      	str	r3, [r2, #24]
 80015e6:	4b53      	ldr	r3, [pc, #332]	; (8001734 <HAL_GPIO_Init+0x28c>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015f2:	4a51      	ldr	r2, [pc, #324]	; (8001738 <HAL_GPIO_Init+0x290>)
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	3302      	adds	r3, #2
 80015fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	220f      	movs	r2, #15
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	4013      	ands	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a48      	ldr	r2, [pc, #288]	; (800173c <HAL_GPIO_Init+0x294>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d00d      	beq.n	800163a <HAL_GPIO_Init+0x192>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a47      	ldr	r2, [pc, #284]	; (8001740 <HAL_GPIO_Init+0x298>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d007      	beq.n	8001636 <HAL_GPIO_Init+0x18e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a46      	ldr	r2, [pc, #280]	; (8001744 <HAL_GPIO_Init+0x29c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d101      	bne.n	8001632 <HAL_GPIO_Init+0x18a>
 800162e:	2302      	movs	r3, #2
 8001630:	e004      	b.n	800163c <HAL_GPIO_Init+0x194>
 8001632:	2303      	movs	r3, #3
 8001634:	e002      	b.n	800163c <HAL_GPIO_Init+0x194>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <HAL_GPIO_Init+0x194>
 800163a:	2300      	movs	r3, #0
 800163c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800163e:	f002 0203 	and.w	r2, r2, #3
 8001642:	0092      	lsls	r2, r2, #2
 8001644:	4093      	lsls	r3, r2
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	4313      	orrs	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800164c:	493a      	ldr	r1, [pc, #232]	; (8001738 <HAL_GPIO_Init+0x290>)
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	089b      	lsrs	r3, r3, #2
 8001652:	3302      	adds	r3, #2
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d006      	beq.n	8001674 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001666:	4b38      	ldr	r3, [pc, #224]	; (8001748 <HAL_GPIO_Init+0x2a0>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4937      	ldr	r1, [pc, #220]	; (8001748 <HAL_GPIO_Init+0x2a0>)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	600b      	str	r3, [r1, #0]
 8001672:	e006      	b.n	8001682 <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001674:	4b34      	ldr	r3, [pc, #208]	; (8001748 <HAL_GPIO_Init+0x2a0>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	43db      	mvns	r3, r3
 800167c:	4932      	ldr	r1, [pc, #200]	; (8001748 <HAL_GPIO_Init+0x2a0>)
 800167e:	4013      	ands	r3, r2
 8001680:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d006      	beq.n	800169c <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800168e:	4b2e      	ldr	r3, [pc, #184]	; (8001748 <HAL_GPIO_Init+0x2a0>)
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	492d      	ldr	r1, [pc, #180]	; (8001748 <HAL_GPIO_Init+0x2a0>)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	604b      	str	r3, [r1, #4]
 800169a:	e006      	b.n	80016aa <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800169c:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <HAL_GPIO_Init+0x2a0>)
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	4928      	ldr	r1, [pc, #160]	; (8001748 <HAL_GPIO_Init+0x2a0>)
 80016a6:	4013      	ands	r3, r2
 80016a8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d006      	beq.n	80016c4 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016b6:	4b24      	ldr	r3, [pc, #144]	; (8001748 <HAL_GPIO_Init+0x2a0>)
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	4923      	ldr	r1, [pc, #140]	; (8001748 <HAL_GPIO_Init+0x2a0>)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	608b      	str	r3, [r1, #8]
 80016c2:	e006      	b.n	80016d2 <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016c4:	4b20      	ldr	r3, [pc, #128]	; (8001748 <HAL_GPIO_Init+0x2a0>)
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	491e      	ldr	r1, [pc, #120]	; (8001748 <HAL_GPIO_Init+0x2a0>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d006      	beq.n	80016ec <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016de:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <HAL_GPIO_Init+0x2a0>)
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	4919      	ldr	r1, [pc, #100]	; (8001748 <HAL_GPIO_Init+0x2a0>)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	60cb      	str	r3, [r1, #12]
 80016ea:	e006      	b.n	80016fa <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <HAL_GPIO_Init+0x2a0>)
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	4914      	ldr	r1, [pc, #80]	; (8001748 <HAL_GPIO_Init+0x2a0>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	3301      	adds	r3, #1
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	fa22 f303 	lsr.w	r3, r2, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	f47f aed6 	bne.w	80014bc <HAL_GPIO_Init+0x14>
  }
}
 8001710:	bf00      	nop
 8001712:	372c      	adds	r7, #44	; 0x2c
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	10210000 	.word	0x10210000
 8001720:	10110000 	.word	0x10110000
 8001724:	10120000 	.word	0x10120000
 8001728:	10310000 	.word	0x10310000
 800172c:	10320000 	.word	0x10320000
 8001730:	10220000 	.word	0x10220000
 8001734:	40021000 	.word	0x40021000
 8001738:	40010000 	.word	0x40010000
 800173c:	40010800 	.word	0x40010800
 8001740:	40010c00 	.word	0x40010c00
 8001744:	40011000 	.word	0x40011000
 8001748:	40010400 	.word	0x40010400

0800174c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d002      	beq.n	800176a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001764:	2301      	movs	r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]
 8001768:	e001      	b.n	800176e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800176a:	2300      	movs	r3, #0
 800176c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800176e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr

0800177a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	460b      	mov	r3, r1
 8001784:	807b      	strh	r3, [r7, #2]
 8001786:	4613      	mov	r3, r2
 8001788:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800178a:	787b      	ldrb	r3, [r7, #1]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001790:	887a      	ldrh	r2, [r7, #2]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001796:	e003      	b.n	80017a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001798:	887b      	ldrh	r3, [r7, #2]
 800179a:	041a      	lsls	r2, r3, #16
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	611a      	str	r2, [r3, #16]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b085      	sub	sp, #20
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	460b      	mov	r3, r1
 80017b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017bc:	887a      	ldrh	r2, [r7, #2]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	4013      	ands	r3, r2
 80017c2:	041a      	lsls	r2, r3, #16
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	887b      	ldrh	r3, [r7, #2]
 80017ca:	400b      	ands	r3, r1
 80017cc:	431a      	orrs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	611a      	str	r2, [r3, #16]
}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e26c      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 8087 	beq.w	800190a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017fc:	4b92      	ldr	r3, [pc, #584]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 030c 	and.w	r3, r3, #12
 8001804:	2b04      	cmp	r3, #4
 8001806:	d00c      	beq.n	8001822 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001808:	4b8f      	ldr	r3, [pc, #572]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 030c 	and.w	r3, r3, #12
 8001810:	2b08      	cmp	r3, #8
 8001812:	d112      	bne.n	800183a <HAL_RCC_OscConfig+0x5e>
 8001814:	4b8c      	ldr	r3, [pc, #560]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001820:	d10b      	bne.n	800183a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001822:	4b89      	ldr	r3, [pc, #548]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d06c      	beq.n	8001908 <HAL_RCC_OscConfig+0x12c>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d168      	bne.n	8001908 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e246      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x76>
 8001844:	4b80      	ldr	r3, [pc, #512]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a7f      	ldr	r2, [pc, #508]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800184a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	e02e      	b.n	80018b0 <HAL_RCC_OscConfig+0xd4>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10c      	bne.n	8001874 <HAL_RCC_OscConfig+0x98>
 800185a:	4b7b      	ldr	r3, [pc, #492]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a7a      	ldr	r2, [pc, #488]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	4b78      	ldr	r3, [pc, #480]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a77      	ldr	r2, [pc, #476]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800186c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	e01d      	b.n	80018b0 <HAL_RCC_OscConfig+0xd4>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800187c:	d10c      	bne.n	8001898 <HAL_RCC_OscConfig+0xbc>
 800187e:	4b72      	ldr	r3, [pc, #456]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a71      	ldr	r2, [pc, #452]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b6f      	ldr	r3, [pc, #444]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a6e      	ldr	r2, [pc, #440]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e00b      	b.n	80018b0 <HAL_RCC_OscConfig+0xd4>
 8001898:	4b6b      	ldr	r3, [pc, #428]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a6a      	ldr	r2, [pc, #424]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800189e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	4b68      	ldr	r3, [pc, #416]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a67      	ldr	r2, [pc, #412]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80018aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d013      	beq.n	80018e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff fa46 	bl	8000d48 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c0:	f7ff fa42 	bl	8000d48 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b64      	cmp	r3, #100	; 0x64
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e1fa      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	4b5d      	ldr	r3, [pc, #372]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0xe4>
 80018de:	e014      	b.n	800190a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fa32 	bl	8000d48 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff fa2e 	bl	8000d48 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	; 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e1e6      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fa:	4b53      	ldr	r3, [pc, #332]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x10c>
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d063      	beq.n	80019de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001916:	4b4c      	ldr	r3, [pc, #304]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00b      	beq.n	800193a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001922:	4b49      	ldr	r3, [pc, #292]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b08      	cmp	r3, #8
 800192c:	d11c      	bne.n	8001968 <HAL_RCC_OscConfig+0x18c>
 800192e:	4b46      	ldr	r3, [pc, #280]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d116      	bne.n	8001968 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193a:	4b43      	ldr	r3, [pc, #268]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d005      	beq.n	8001952 <HAL_RCC_OscConfig+0x176>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d001      	beq.n	8001952 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e1ba      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001952:	4b3d      	ldr	r3, [pc, #244]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	4939      	ldr	r1, [pc, #228]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001962:	4313      	orrs	r3, r2
 8001964:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001966:	e03a      	b.n	80019de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d020      	beq.n	80019b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001970:	4b36      	ldr	r3, [pc, #216]	; (8001a4c <HAL_RCC_OscConfig+0x270>)
 8001972:	2201      	movs	r2, #1
 8001974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001976:	f7ff f9e7 	bl	8000d48 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800197e:	f7ff f9e3 	bl	8000d48 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e19b      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001990:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0f0      	beq.n	800197e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199c:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	4927      	ldr	r1, [pc, #156]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	600b      	str	r3, [r1, #0]
 80019b0:	e015      	b.n	80019de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b2:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <HAL_RCC_OscConfig+0x270>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff f9c6 	bl	8000d48 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c0:	f7ff f9c2 	bl	8000d48 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e17a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d2:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d03a      	beq.n	8001a60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d019      	beq.n	8001a26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019f2:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f8:	f7ff f9a6 	bl	8000d48 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a00:	f7ff f9a2 	bl	8000d48 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e15a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f0      	beq.n	8001a00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f000 fada 	bl	8001fd8 <RCC_Delay>
 8001a24:	e01c      	b.n	8001a60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2c:	f7ff f98c 	bl	8000d48 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a32:	e00f      	b.n	8001a54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a34:	f7ff f988 	bl	8000d48 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d908      	bls.n	8001a54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e140      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	42420000 	.word	0x42420000
 8001a50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a54:	4b9e      	ldr	r3, [pc, #632]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1e9      	bne.n	8001a34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80a6 	beq.w	8001bba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a72:	4b97      	ldr	r3, [pc, #604]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10d      	bne.n	8001a9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	4b94      	ldr	r3, [pc, #592]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	4a93      	ldr	r2, [pc, #588]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a88:	61d3      	str	r3, [r2, #28]
 8001a8a:	4b91      	ldr	r3, [pc, #580]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a96:	2301      	movs	r3, #1
 8001a98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9a:	4b8e      	ldr	r3, [pc, #568]	; (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d118      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aa6:	4b8b      	ldr	r3, [pc, #556]	; (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a8a      	ldr	r2, [pc, #552]	; (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ab2:	f7ff f949 	bl	8000d48 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aba:	f7ff f945 	bl	8000d48 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b64      	cmp	r3, #100	; 0x64
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e0fd      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001acc:	4b81      	ldr	r3, [pc, #516]	; (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d106      	bne.n	8001aee <HAL_RCC_OscConfig+0x312>
 8001ae0:	4b7b      	ldr	r3, [pc, #492]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	4a7a      	ldr	r2, [pc, #488]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6213      	str	r3, [r2, #32]
 8001aec:	e02d      	b.n	8001b4a <HAL_RCC_OscConfig+0x36e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x334>
 8001af6:	4b76      	ldr	r3, [pc, #472]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	4a75      	ldr	r2, [pc, #468]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	6213      	str	r3, [r2, #32]
 8001b02:	4b73      	ldr	r3, [pc, #460]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	4a72      	ldr	r2, [pc, #456]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b08:	f023 0304 	bic.w	r3, r3, #4
 8001b0c:	6213      	str	r3, [r2, #32]
 8001b0e:	e01c      	b.n	8001b4a <HAL_RCC_OscConfig+0x36e>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	2b05      	cmp	r3, #5
 8001b16:	d10c      	bne.n	8001b32 <HAL_RCC_OscConfig+0x356>
 8001b18:	4b6d      	ldr	r3, [pc, #436]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	4a6c      	ldr	r2, [pc, #432]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	6213      	str	r3, [r2, #32]
 8001b24:	4b6a      	ldr	r3, [pc, #424]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	4a69      	ldr	r2, [pc, #420]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6213      	str	r3, [r2, #32]
 8001b30:	e00b      	b.n	8001b4a <HAL_RCC_OscConfig+0x36e>
 8001b32:	4b67      	ldr	r3, [pc, #412]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	4a66      	ldr	r2, [pc, #408]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	6213      	str	r3, [r2, #32]
 8001b3e:	4b64      	ldr	r3, [pc, #400]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	4a63      	ldr	r2, [pc, #396]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	f023 0304 	bic.w	r3, r3, #4
 8001b48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d015      	beq.n	8001b7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b52:	f7ff f8f9 	bl	8000d48 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b58:	e00a      	b.n	8001b70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b5a:	f7ff f8f5 	bl	8000d48 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e0ab      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b70:	4b57      	ldr	r3, [pc, #348]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0ee      	beq.n	8001b5a <HAL_RCC_OscConfig+0x37e>
 8001b7c:	e014      	b.n	8001ba8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7e:	f7ff f8e3 	bl	8000d48 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b84:	e00a      	b.n	8001b9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b86:	f7ff f8df 	bl	8000d48 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e095      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b9c:	4b4c      	ldr	r3, [pc, #304]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1ee      	bne.n	8001b86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ba8:	7dfb      	ldrb	r3, [r7, #23]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d105      	bne.n	8001bba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bae:	4b48      	ldr	r3, [pc, #288]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	4a47      	ldr	r2, [pc, #284]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8081 	beq.w	8001cc6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bc4:	4b42      	ldr	r3, [pc, #264]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d061      	beq.n	8001c94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d146      	bne.n	8001c66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd8:	4b3f      	ldr	r3, [pc, #252]	; (8001cd8 <HAL_RCC_OscConfig+0x4fc>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bde:	f7ff f8b3 	bl	8000d48 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be6:	f7ff f8af 	bl	8000d48 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e067      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf8:	4b35      	ldr	r3, [pc, #212]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f0      	bne.n	8001be6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0c:	d108      	bne.n	8001c20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c0e:	4b30      	ldr	r3, [pc, #192]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	492d      	ldr	r1, [pc, #180]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c20:	4b2b      	ldr	r3, [pc, #172]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a19      	ldr	r1, [r3, #32]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	430b      	orrs	r3, r1
 8001c32:	4927      	ldr	r1, [pc, #156]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c38:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <HAL_RCC_OscConfig+0x4fc>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3e:	f7ff f883 	bl	8000d48 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c46:	f7ff f87f 	bl	8000d48 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e037      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c58:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x46a>
 8001c64:	e02f      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c66:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <HAL_RCC_OscConfig+0x4fc>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7ff f86c 	bl	8000d48 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c74:	f7ff f868 	bl	8000d48 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e020      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0x498>
 8001c92:	e018      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e013      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d106      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d001      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	42420060 	.word	0x42420060

08001cdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e0d0      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf0:	4b6a      	ldr	r3, [pc, #424]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d910      	bls.n	8001d20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfe:	4b67      	ldr	r3, [pc, #412]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 0207 	bic.w	r2, r3, #7
 8001d06:	4965      	ldr	r1, [pc, #404]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0e:	4b63      	ldr	r3, [pc, #396]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d001      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e0b8      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d020      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d38:	4b59      	ldr	r3, [pc, #356]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	4a58      	ldr	r2, [pc, #352]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d50:	4b53      	ldr	r3, [pc, #332]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	4a52      	ldr	r2, [pc, #328]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d5c:	4b50      	ldr	r3, [pc, #320]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	494d      	ldr	r1, [pc, #308]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d040      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d107      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d82:	4b47      	ldr	r3, [pc, #284]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d115      	bne.n	8001dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e07f      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d107      	bne.n	8001daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9a:	4b41      	ldr	r3, [pc, #260]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d109      	bne.n	8001dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e073      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001daa:	4b3d      	ldr	r3, [pc, #244]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e06b      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dba:	4b39      	ldr	r3, [pc, #228]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f023 0203 	bic.w	r2, r3, #3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	4936      	ldr	r1, [pc, #216]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dcc:	f7fe ffbc 	bl	8000d48 <HAL_GetTick>
 8001dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd2:	e00a      	b.n	8001dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd4:	f7fe ffb8 	bl	8000d48 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e053      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dea:	4b2d      	ldr	r3, [pc, #180]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 020c 	and.w	r2, r3, #12
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d1eb      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dfc:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d210      	bcs.n	8001e2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0a:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f023 0207 	bic.w	r2, r3, #7
 8001e12:	4922      	ldr	r1, [pc, #136]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1a:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d001      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e032      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d008      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e38:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	4916      	ldr	r1, [pc, #88]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d009      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e56:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	490e      	ldr	r1, [pc, #56]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e6a:	f000 f821 	bl	8001eb0 <HAL_RCC_GetSysClockFreq>
 8001e6e:	4601      	mov	r1, r0
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e7c:	5cd3      	ldrb	r3, [r2, r3]
 8001e7e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e82:	4a09      	ldr	r2, [pc, #36]	; (8001ea8 <HAL_RCC_ClockConfig+0x1cc>)
 8001e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_RCC_ClockConfig+0x1d0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe ff1a 	bl	8000cc4 <HAL_InitTick>

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40022000 	.word	0x40022000
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	08003334 	.word	0x08003334
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	20000004 	.word	0x20000004

08001eb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eb0:	b490      	push	{r4, r7}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001eb6:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001eb8:	1d3c      	adds	r4, r7, #4
 8001eba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ebc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ec0:	4b28      	ldr	r3, [pc, #160]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001eda:	4b23      	ldr	r3, [pc, #140]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d002      	beq.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x40>
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d003      	beq.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x46>
 8001eee:	e02d      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ef0:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ef2:	623b      	str	r3, [r7, #32]
      break;
 8001ef4:	e02d      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	0c9b      	lsrs	r3, r3, #18
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f02:	4413      	add	r3, r2
 8001f04:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f08:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d013      	beq.n	8001f3c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f14:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	0c5b      	lsrs	r3, r3, #17
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f22:	4413      	add	r3, r2
 8001f24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	4a0f      	ldr	r2, [pc, #60]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f2e:	fb02 f203 	mul.w	r2, r2, r3
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
 8001f3a:	e004      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	4a0c      	ldr	r2, [pc, #48]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f40:	fb02 f303 	mul.w	r3, r2, r3
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	623b      	str	r3, [r7, #32]
      break;
 8001f4a:	e002      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f4e:	623b      	str	r3, [r7, #32]
      break;
 8001f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f52:	6a3b      	ldr	r3, [r7, #32]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3728      	adds	r7, #40	; 0x28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc90      	pop	{r4, r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	08003320 	.word	0x08003320
 8001f64:	08003330 	.word	0x08003330
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	007a1200 	.word	0x007a1200
 8001f70:	003d0900 	.word	0x003d0900

08001f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f78:	4b02      	ldr	r3, [pc, #8]	; (8001f84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr
 8001f84:	20000000 	.word	0x20000000

08001f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f8c:	f7ff fff2 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001f90:	4601      	mov	r1, r0
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	0a1b      	lsrs	r3, r3, #8
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	4a03      	ldr	r2, [pc, #12]	; (8001fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f9e:	5cd3      	ldrb	r3, [r2, r3]
 8001fa0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	08003344 	.word	0x08003344

08001fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fb4:	f7ff ffde 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001fb8:	4601      	mov	r1, r0
 8001fba:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	0adb      	lsrs	r3, r3, #11
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	4a03      	ldr	r2, [pc, #12]	; (8001fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fc6:	5cd3      	ldrb	r3, [r2, r3]
 8001fc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	08003344 	.word	0x08003344

08001fd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	; (800200c <RCC_Delay+0x34>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <RCC_Delay+0x38>)
 8001fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fea:	0a5b      	lsrs	r3, r3, #9
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	fb02 f303 	mul.w	r3, r2, r3
 8001ff2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ff4:	bf00      	nop
  }
  while (Delay --);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1e5a      	subs	r2, r3, #1
 8001ffa:	60fa      	str	r2, [r7, #12]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1f9      	bne.n	8001ff4 <RCC_Delay+0x1c>
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	20000000 	.word	0x20000000
 8002010:	10624dd3 	.word	0x10624dd3

08002014 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e041      	b.n	80020aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d106      	bne.n	8002040 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7fe fc0c 	bl	8000858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2202      	movs	r2, #2
 8002044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3304      	adds	r3, #4
 8002050:	4619      	mov	r1, r3
 8002052:	4610      	mov	r0, r2
 8002054:	f000 fa98 	bl	8002588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e041      	b.n	8002148 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d106      	bne.n	80020de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f839 	bl	8002150 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2202      	movs	r2, #2
 80020e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3304      	adds	r3, #4
 80020ee:	4619      	mov	r1, r3
 80020f0:	4610      	mov	r0, r2
 80020f2:	f000 fa49 	bl	8002588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
	...

08002164 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d109      	bne.n	8002188 <HAL_TIM_PWM_Start+0x24>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b01      	cmp	r3, #1
 800217e:	bf14      	ite	ne
 8002180:	2301      	movne	r3, #1
 8002182:	2300      	moveq	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	e022      	b.n	80021ce <HAL_TIM_PWM_Start+0x6a>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	2b04      	cmp	r3, #4
 800218c:	d109      	bne.n	80021a2 <HAL_TIM_PWM_Start+0x3e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b01      	cmp	r3, #1
 8002198:	bf14      	ite	ne
 800219a:	2301      	movne	r3, #1
 800219c:	2300      	moveq	r3, #0
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	e015      	b.n	80021ce <HAL_TIM_PWM_Start+0x6a>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d109      	bne.n	80021bc <HAL_TIM_PWM_Start+0x58>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	bf14      	ite	ne
 80021b4:	2301      	movne	r3, #1
 80021b6:	2300      	moveq	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	e008      	b.n	80021ce <HAL_TIM_PWM_Start+0x6a>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	bf14      	ite	ne
 80021c8:	2301      	movne	r3, #1
 80021ca:	2300      	moveq	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e059      	b.n	800228a <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d104      	bne.n	80021e6 <HAL_TIM_PWM_Start+0x82>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021e4:	e013      	b.n	800220e <HAL_TIM_PWM_Start+0xaa>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d104      	bne.n	80021f6 <HAL_TIM_PWM_Start+0x92>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021f4:	e00b      	b.n	800220e <HAL_TIM_PWM_Start+0xaa>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d104      	bne.n	8002206 <HAL_TIM_PWM_Start+0xa2>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002204:	e003      	b.n	800220e <HAL_TIM_PWM_Start+0xaa>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2202      	movs	r2, #2
 800220a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2201      	movs	r2, #1
 8002214:	6839      	ldr	r1, [r7, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f000 fc2c 	bl	8002a74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a1c      	ldr	r2, [pc, #112]	; (8002294 <HAL_TIM_PWM_Start+0x130>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d107      	bne.n	8002236 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002234:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a16      	ldr	r2, [pc, #88]	; (8002294 <HAL_TIM_PWM_Start+0x130>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d009      	beq.n	8002254 <HAL_TIM_PWM_Start+0xf0>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002248:	d004      	beq.n	8002254 <HAL_TIM_PWM_Start+0xf0>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a12      	ldr	r2, [pc, #72]	; (8002298 <HAL_TIM_PWM_Start+0x134>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d111      	bne.n	8002278 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b06      	cmp	r3, #6
 8002264:	d010      	beq.n	8002288 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0201 	orr.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002276:	e007      	b.n	8002288 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40012c00 	.word	0x40012c00
 8002298:	40000400 	.word	0x40000400

0800229c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e0ac      	b.n	8002410 <HAL_TIM_PWM_ConfigChannel+0x174>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b0c      	cmp	r3, #12
 80022c2:	f200 809f 	bhi.w	8002404 <HAL_TIM_PWM_ConfigChannel+0x168>
 80022c6:	a201      	add	r2, pc, #4	; (adr r2, 80022cc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80022c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022cc:	08002301 	.word	0x08002301
 80022d0:	08002405 	.word	0x08002405
 80022d4:	08002405 	.word	0x08002405
 80022d8:	08002405 	.word	0x08002405
 80022dc:	08002341 	.word	0x08002341
 80022e0:	08002405 	.word	0x08002405
 80022e4:	08002405 	.word	0x08002405
 80022e8:	08002405 	.word	0x08002405
 80022ec:	08002383 	.word	0x08002383
 80022f0:	08002405 	.word	0x08002405
 80022f4:	08002405 	.word	0x08002405
 80022f8:	08002405 	.word	0x08002405
 80022fc:	080023c3 	.word	0x080023c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68b9      	ldr	r1, [r7, #8]
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f996 	bl	8002638 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699a      	ldr	r2, [r3, #24]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0208 	orr.w	r2, r2, #8
 800231a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0204 	bic.w	r2, r2, #4
 800232a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6999      	ldr	r1, [r3, #24]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	619a      	str	r2, [r3, #24]
      break;
 800233e:	e062      	b.n	8002406 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	4618      	mov	r0, r3
 8002348:	f000 f9dc 	bl	8002704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800235a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699a      	ldr	r2, [r3, #24]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800236a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6999      	ldr	r1, [r3, #24]
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	021a      	lsls	r2, r3, #8
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	619a      	str	r2, [r3, #24]
      break;
 8002380:	e041      	b.n	8002406 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68b9      	ldr	r1, [r7, #8]
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fa25 	bl	80027d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	69da      	ldr	r2, [r3, #28]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f042 0208 	orr.w	r2, r2, #8
 800239c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	69da      	ldr	r2, [r3, #28]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0204 	bic.w	r2, r2, #4
 80023ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	69d9      	ldr	r1, [r3, #28]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	61da      	str	r2, [r3, #28]
      break;
 80023c0:	e021      	b.n	8002406 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68b9      	ldr	r1, [r7, #8]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 fa6f 	bl	80028ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	69da      	ldr	r2, [r3, #28]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	69da      	ldr	r2, [r3, #28]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69d9      	ldr	r1, [r3, #28]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	021a      	lsls	r2, r3, #8
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	61da      	str	r2, [r3, #28]
      break;
 8002402:	e000      	b.n	8002406 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002404:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_TIM_ConfigClockSource+0x18>
 800242c:	2302      	movs	r3, #2
 800242e:	e0a6      	b.n	800257e <HAL_TIM_ConfigClockSource+0x166>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800244e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002456:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b40      	cmp	r3, #64	; 0x40
 8002466:	d067      	beq.n	8002538 <HAL_TIM_ConfigClockSource+0x120>
 8002468:	2b40      	cmp	r3, #64	; 0x40
 800246a:	d80b      	bhi.n	8002484 <HAL_TIM_ConfigClockSource+0x6c>
 800246c:	2b10      	cmp	r3, #16
 800246e:	d073      	beq.n	8002558 <HAL_TIM_ConfigClockSource+0x140>
 8002470:	2b10      	cmp	r3, #16
 8002472:	d802      	bhi.n	800247a <HAL_TIM_ConfigClockSource+0x62>
 8002474:	2b00      	cmp	r3, #0
 8002476:	d06f      	beq.n	8002558 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002478:	e078      	b.n	800256c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800247a:	2b20      	cmp	r3, #32
 800247c:	d06c      	beq.n	8002558 <HAL_TIM_ConfigClockSource+0x140>
 800247e:	2b30      	cmp	r3, #48	; 0x30
 8002480:	d06a      	beq.n	8002558 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002482:	e073      	b.n	800256c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002484:	2b70      	cmp	r3, #112	; 0x70
 8002486:	d00d      	beq.n	80024a4 <HAL_TIM_ConfigClockSource+0x8c>
 8002488:	2b70      	cmp	r3, #112	; 0x70
 800248a:	d804      	bhi.n	8002496 <HAL_TIM_ConfigClockSource+0x7e>
 800248c:	2b50      	cmp	r3, #80	; 0x50
 800248e:	d033      	beq.n	80024f8 <HAL_TIM_ConfigClockSource+0xe0>
 8002490:	2b60      	cmp	r3, #96	; 0x60
 8002492:	d041      	beq.n	8002518 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002494:	e06a      	b.n	800256c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800249a:	d066      	beq.n	800256a <HAL_TIM_ConfigClockSource+0x152>
 800249c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024a0:	d017      	beq.n	80024d2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80024a2:	e063      	b.n	800256c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	6899      	ldr	r1, [r3, #8]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f000 fabf 	bl	8002a36 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024c6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	609a      	str	r2, [r3, #8]
      break;
 80024d0:	e04c      	b.n	800256c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6818      	ldr	r0, [r3, #0]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	6899      	ldr	r1, [r3, #8]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f000 faa8 	bl	8002a36 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024f4:	609a      	str	r2, [r3, #8]
      break;
 80024f6:	e039      	b.n	800256c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6859      	ldr	r1, [r3, #4]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	461a      	mov	r2, r3
 8002506:	f000 fa1f 	bl	8002948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2150      	movs	r1, #80	; 0x50
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fa76 	bl	8002a02 <TIM_ITRx_SetConfig>
      break;
 8002516:	e029      	b.n	800256c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	6859      	ldr	r1, [r3, #4]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	461a      	mov	r2, r3
 8002526:	f000 fa3d 	bl	80029a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2160      	movs	r1, #96	; 0x60
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fa66 	bl	8002a02 <TIM_ITRx_SetConfig>
      break;
 8002536:	e019      	b.n	800256c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	6859      	ldr	r1, [r3, #4]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	461a      	mov	r2, r3
 8002546:	f000 f9ff 	bl	8002948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2140      	movs	r1, #64	; 0x40
 8002550:	4618      	mov	r0, r3
 8002552:	f000 fa56 	bl	8002a02 <TIM_ITRx_SetConfig>
      break;
 8002556:	e009      	b.n	800256c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4619      	mov	r1, r3
 8002562:	4610      	mov	r0, r2
 8002564:	f000 fa4d 	bl	8002a02 <TIM_ITRx_SetConfig>
        break;
 8002568:	e000      	b.n	800256c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800256a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a25      	ldr	r2, [pc, #148]	; (8002630 <TIM_Base_SetConfig+0xa8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d007      	beq.n	80025b0 <TIM_Base_SetConfig+0x28>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a6:	d003      	beq.n	80025b0 <TIM_Base_SetConfig+0x28>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a22      	ldr	r2, [pc, #136]	; (8002634 <TIM_Base_SetConfig+0xac>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d108      	bne.n	80025c2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	4313      	orrs	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a1a      	ldr	r2, [pc, #104]	; (8002630 <TIM_Base_SetConfig+0xa8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d007      	beq.n	80025da <TIM_Base_SetConfig+0x52>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d0:	d003      	beq.n	80025da <TIM_Base_SetConfig+0x52>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a17      	ldr	r2, [pc, #92]	; (8002634 <TIM_Base_SetConfig+0xac>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d108      	bne.n	80025ec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a07      	ldr	r2, [pc, #28]	; (8002630 <TIM_Base_SetConfig+0xa8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d103      	bne.n	8002620 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	615a      	str	r2, [r3, #20]
}
 8002626:	bf00      	nop
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr
 8002630:	40012c00 	.word	0x40012c00
 8002634:	40000400 	.word	0x40000400

08002638 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	f023 0201 	bic.w	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f023 0303 	bic.w	r3, r3, #3
 800266e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4313      	orrs	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f023 0302 	bic.w	r3, r3, #2
 8002680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4313      	orrs	r3, r2
 800268a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a1c      	ldr	r2, [pc, #112]	; (8002700 <TIM_OC1_SetConfig+0xc8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d10c      	bne.n	80026ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f023 0308 	bic.w	r3, r3, #8
 800269a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f023 0304 	bic.w	r3, r3, #4
 80026ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a13      	ldr	r2, [pc, #76]	; (8002700 <TIM_OC1_SetConfig+0xc8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d111      	bne.n	80026da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	621a      	str	r2, [r3, #32]
}
 80026f4:	bf00      	nop
 80026f6:	371c      	adds	r7, #28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40012c00 	.word	0x40012c00

08002704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	f023 0210 	bic.w	r2, r3, #16
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800273a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	4313      	orrs	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f023 0320 	bic.w	r3, r3, #32
 800274e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4313      	orrs	r3, r2
 800275a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <TIM_OC2_SetConfig+0xd0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d10d      	bne.n	8002780 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800276a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4313      	orrs	r3, r2
 8002776:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800277e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a14      	ldr	r2, [pc, #80]	; (80027d4 <TIM_OC2_SetConfig+0xd0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d113      	bne.n	80027b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800278e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002796:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	621a      	str	r2, [r3, #32]
}
 80027ca:	bf00      	nop
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	40012c00 	.word	0x40012c00

080027d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f023 0303 	bic.w	r3, r3, #3
 800280e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	021b      	lsls	r3, r3, #8
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	4313      	orrs	r3, r2
 800282c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a1d      	ldr	r2, [pc, #116]	; (80028a8 <TIM_OC3_SetConfig+0xd0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d10d      	bne.n	8002852 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800283c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	4313      	orrs	r3, r2
 8002848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a14      	ldr	r2, [pc, #80]	; (80028a8 <TIM_OC3_SetConfig+0xd0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d113      	bne.n	8002882 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	621a      	str	r2, [r3, #32]
}
 800289c:	bf00      	nop
 800289e:	371c      	adds	r7, #28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	40012c00 	.word	0x40012c00

080028ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	031b      	lsls	r3, r3, #12
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a0f      	ldr	r2, [pc, #60]	; (8002944 <TIM_OC4_SetConfig+0x98>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d109      	bne.n	8002920 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002912:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	019b      	lsls	r3, r3, #6
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	4313      	orrs	r3, r2
 800291e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	621a      	str	r2, [r3, #32]
}
 800293a:	bf00      	nop
 800293c:	371c      	adds	r7, #28
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	40012c00 	.word	0x40012c00

08002948 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002948:	b480      	push	{r7}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	f023 0201 	bic.w	r2, r3, #1
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f023 030a 	bic.w	r3, r3, #10
 8002984:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	621a      	str	r2, [r3, #32]
}
 800299a:	bf00      	nop
 800299c:	371c      	adds	r7, #28
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	f023 0210 	bic.w	r2, r3, #16
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	031b      	lsls	r3, r3, #12
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	621a      	str	r2, [r3, #32]
}
 80029f8:	bf00      	nop
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr

08002a02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f043 0307 	orr.w	r3, r3, #7
 8002a24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	609a      	str	r2, [r3, #8]
}
 8002a2c:	bf00      	nop
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b087      	sub	sp, #28
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
 8002a42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	021a      	lsls	r2, r3, #8
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	609a      	str	r2, [r3, #8]
}
 8002a6a:	bf00      	nop
 8002a6c:	371c      	adds	r7, #28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	2201      	movs	r2, #1
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a1a      	ldr	r2, [r3, #32]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	401a      	ands	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a1a      	ldr	r2, [r3, #32]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	431a      	orrs	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	621a      	str	r2, [r3, #32]
}
 8002ab2:	bf00      	nop
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e041      	b.n	8002b58 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a14      	ldr	r2, [pc, #80]	; (8002b64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d009      	beq.n	8002b2c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b20:	d004      	beq.n	8002b2c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a10      	ldr	r2, [pc, #64]	; (8002b68 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d10c      	bne.n	8002b46 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40012c00 	.word	0x40012c00
 8002b68:	40000400 	.word	0x40000400

08002b6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e03f      	b.n	8002bfe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7fd feb0 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2224      	movs	r2, #36	; 0x24
 8002b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fae3 	bl	800317c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695a      	ldr	r2, [r3, #20]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002be4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b085      	sub	sp, #20
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	4613      	mov	r3, r2
 8002c12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	d130      	bne.n	8002c82 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_UART_Transmit_IT+0x26>
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e029      	b.n	8002c84 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_UART_Transmit_IT+0x38>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e022      	b.n	8002c84 <HAL_UART_Transmit_IT+0x7e>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	88fa      	ldrh	r2, [r7, #6]
 8002c50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	88fa      	ldrh	r2, [r7, #6]
 8002c56:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2221      	movs	r2, #33	; 0x21
 8002c62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c7c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e000      	b.n	8002c84 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002c82:	2302      	movs	r3, #2
  }
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr

08002c8e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b085      	sub	sp, #20
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	d140      	bne.n	8002d2a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_UART_Receive_IT+0x26>
 8002cae:	88fb      	ldrh	r3, [r7, #6]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e039      	b.n	8002d2c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_UART_Receive_IT+0x38>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e032      	b.n	8002d2c <HAL_UART_Receive_IT+0x9e>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	88fa      	ldrh	r2, [r7, #6]
 8002cd8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	88fa      	ldrh	r2, [r7, #6]
 8002cde:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2222      	movs	r2, #34	; 0x22
 8002cea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d04:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695a      	ldr	r2, [r3, #20]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0201 	orr.w	r2, r2, #1
 8002d14:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0220 	orr.w	r2, r2, #32
 8002d24:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	e000      	b.n	8002d2c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002d2a:	2302      	movs	r3, #2
  }
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr
	...

08002d38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10d      	bne.n	8002d8a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_UART_IRQHandler+0x52>
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f979 	bl	800307a <UART_Receive_IT>
      return;
 8002d88:	e0d1      	b.n	8002f2e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80b0 	beq.w	8002ef2 <HAL_UART_IRQHandler+0x1ba>
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d105      	bne.n	8002da8 <HAL_UART_IRQHandler+0x70>
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 80a5 	beq.w	8002ef2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <HAL_UART_IRQHandler+0x90>
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc0:	f043 0201 	orr.w	r2, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_UART_IRQHandler+0xb0>
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de0:	f043 0202 	orr.w	r2, r3, #2
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00a      	beq.n	8002e08 <HAL_UART_IRQHandler+0xd0>
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e00:	f043 0204 	orr.w	r2, r3, #4
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00f      	beq.n	8002e32 <HAL_UART_IRQHandler+0xfa>
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d104      	bne.n	8002e26 <HAL_UART_IRQHandler+0xee>
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d005      	beq.n	8002e32 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2a:	f043 0208 	orr.w	r2, r3, #8
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d078      	beq.n	8002f2c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d007      	beq.n	8002e54 <HAL_UART_IRQHandler+0x11c>
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f913 	bl	800307a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	bf14      	ite	ne
 8002e62:	2301      	movne	r3, #1
 8002e64:	2300      	moveq	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d102      	bne.n	8002e7c <HAL_UART_IRQHandler+0x144>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d031      	beq.n	8002ee0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f864 	bl	8002f4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d023      	beq.n	8002ed8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e9e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d013      	beq.n	8002ed0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eac:	4a21      	ldr	r2, [pc, #132]	; (8002f34 <HAL_UART_IRQHandler+0x1fc>)
 8002eae:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fe f881 	bl	8000fbc <HAL_DMA_Abort_IT>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d016      	beq.n	8002eee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002eca:	4610      	mov	r0, r2
 8002ecc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ece:	e00e      	b.n	8002eee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f831 	bl	8002f38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed6:	e00a      	b.n	8002eee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f82d 	bl	8002f38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ede:	e006      	b.n	8002eee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f829 	bl	8002f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002eec:	e01e      	b.n	8002f2c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eee:	bf00      	nop
    return;
 8002ef0:	e01c      	b.n	8002f2c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_UART_IRQHandler+0x1d6>
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f850 	bl	8002fac <UART_Transmit_IT>
    return;
 8002f0c:	e00f      	b.n	8002f2e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00a      	beq.n	8002f2e <HAL_UART_IRQHandler+0x1f6>
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d005      	beq.n	8002f2e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f891 	bl	800304a <UART_EndTransmit_IT>
    return;
 8002f28:	bf00      	nop
 8002f2a:	e000      	b.n	8002f2e <HAL_UART_IRQHandler+0x1f6>
    return;
 8002f2c:	bf00      	nop
  }
}
 8002f2e:	3720      	adds	r7, #32
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	08002f85 	.word	0x08002f85

08002f38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr

08002f4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f60:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0201 	bic.w	r2, r2, #1
 8002f70:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f7ff ffca 	bl	8002f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fa4:	bf00      	nop
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b21      	cmp	r3, #33	; 0x21
 8002fbe:	d13e      	bne.n	800303e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc8:	d114      	bne.n	8002ff4 <UART_Transmit_IT+0x48>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d110      	bne.n	8002ff4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fe6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	1c9a      	adds	r2, r3, #2
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	621a      	str	r2, [r3, #32]
 8002ff2:	e008      	b.n	8003006 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	1c59      	adds	r1, r3, #1
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6211      	str	r1, [r2, #32]
 8002ffe:	781a      	ldrb	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800300a:	b29b      	uxth	r3, r3
 800300c:	3b01      	subs	r3, #1
 800300e:	b29b      	uxth	r3, r3
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	4619      	mov	r1, r3
 8003014:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10f      	bne.n	800303a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003028:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003038:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	e000      	b.n	8003040 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800303e:	2302      	movs	r3, #2
  }
}
 8003040:	4618      	mov	r0, r3
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr

0800304a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b082      	sub	sp, #8
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003060:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fd fdd8 	bl	8000c20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b084      	sub	sp, #16
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b22      	cmp	r3, #34	; 0x22
 800308c:	d170      	bne.n	8003170 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003096:	d117      	bne.n	80030c8 <UART_Receive_IT+0x4e>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d113      	bne.n	80030c8 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a8:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	1c9a      	adds	r2, r3, #2
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	629a      	str	r2, [r3, #40]	; 0x28
 80030c6:	e026      	b.n	8003116 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030da:	d007      	beq.n	80030ec <UART_Receive_IT+0x72>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10a      	bne.n	80030fa <UART_Receive_IT+0x80>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d106      	bne.n	80030fa <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	701a      	strb	r2, [r3, #0]
 80030f8:	e008      	b.n	800310c <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003106:	b2da      	uxtb	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29b      	uxth	r3, r3
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	4619      	mov	r1, r3
 8003124:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003126:	2b00      	cmp	r3, #0
 8003128:	d120      	bne.n	800316c <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0220 	bic.w	r2, r2, #32
 8003138:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003148:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fd fcbc 	bl	8000ae0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	e002      	b.n	8003172 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	e000      	b.n	8003172 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003170:	2302      	movs	r3, #2
  }
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031b6:	f023 030c 	bic.w	r3, r3, #12
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	430b      	orrs	r3, r1
 80031c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a2c      	ldr	r2, [pc, #176]	; (8003290 <UART_SetConfig+0x114>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d103      	bne.n	80031ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031e4:	f7fe fee4 	bl	8001fb0 <HAL_RCC_GetPCLK2Freq>
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	e002      	b.n	80031f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031ec:	f7fe fecc 	bl	8001f88 <HAL_RCC_GetPCLK1Freq>
 80031f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	009a      	lsls	r2, r3, #2
 80031fc:	441a      	add	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	fbb2 f3f3 	udiv	r3, r2, r3
 8003208:	4a22      	ldr	r2, [pc, #136]	; (8003294 <UART_SetConfig+0x118>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	0119      	lsls	r1, r3, #4
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	009a      	lsls	r2, r3, #2
 800321c:	441a      	add	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	fbb2 f2f3 	udiv	r2, r2, r3
 8003228:	4b1a      	ldr	r3, [pc, #104]	; (8003294 <UART_SetConfig+0x118>)
 800322a:	fba3 0302 	umull	r0, r3, r3, r2
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	2064      	movs	r0, #100	; 0x64
 8003232:	fb00 f303 	mul.w	r3, r0, r3
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	3332      	adds	r3, #50	; 0x32
 800323c:	4a15      	ldr	r2, [pc, #84]	; (8003294 <UART_SetConfig+0x118>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003248:	4419      	add	r1, r3
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	009a      	lsls	r2, r3, #2
 8003254:	441a      	add	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003260:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <UART_SetConfig+0x118>)
 8003262:	fba3 0302 	umull	r0, r3, r3, r2
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	2064      	movs	r0, #100	; 0x64
 800326a:	fb00 f303 	mul.w	r3, r0, r3
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	3332      	adds	r3, #50	; 0x32
 8003274:	4a07      	ldr	r2, [pc, #28]	; (8003294 <UART_SetConfig+0x118>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	f003 020f 	and.w	r2, r3, #15
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	440a      	add	r2, r1
 8003286:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003288:	bf00      	nop
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40013800 	.word	0x40013800
 8003294:	51eb851f 	.word	0x51eb851f

08003298 <__libc_init_array>:
 8003298:	b570      	push	{r4, r5, r6, lr}
 800329a:	2500      	movs	r5, #0
 800329c:	4e0c      	ldr	r6, [pc, #48]	; (80032d0 <__libc_init_array+0x38>)
 800329e:	4c0d      	ldr	r4, [pc, #52]	; (80032d4 <__libc_init_array+0x3c>)
 80032a0:	1ba4      	subs	r4, r4, r6
 80032a2:	10a4      	asrs	r4, r4, #2
 80032a4:	42a5      	cmp	r5, r4
 80032a6:	d109      	bne.n	80032bc <__libc_init_array+0x24>
 80032a8:	f000 f82e 	bl	8003308 <_init>
 80032ac:	2500      	movs	r5, #0
 80032ae:	4e0a      	ldr	r6, [pc, #40]	; (80032d8 <__libc_init_array+0x40>)
 80032b0:	4c0a      	ldr	r4, [pc, #40]	; (80032dc <__libc_init_array+0x44>)
 80032b2:	1ba4      	subs	r4, r4, r6
 80032b4:	10a4      	asrs	r4, r4, #2
 80032b6:	42a5      	cmp	r5, r4
 80032b8:	d105      	bne.n	80032c6 <__libc_init_array+0x2e>
 80032ba:	bd70      	pop	{r4, r5, r6, pc}
 80032bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032c0:	4798      	blx	r3
 80032c2:	3501      	adds	r5, #1
 80032c4:	e7ee      	b.n	80032a4 <__libc_init_array+0xc>
 80032c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032ca:	4798      	blx	r3
 80032cc:	3501      	adds	r5, #1
 80032ce:	e7f2      	b.n	80032b6 <__libc_init_array+0x1e>
 80032d0:	0800334c 	.word	0x0800334c
 80032d4:	0800334c 	.word	0x0800334c
 80032d8:	0800334c 	.word	0x0800334c
 80032dc:	08003350 	.word	0x08003350

080032e0 <memcpy>:
 80032e0:	b510      	push	{r4, lr}
 80032e2:	1e43      	subs	r3, r0, #1
 80032e4:	440a      	add	r2, r1
 80032e6:	4291      	cmp	r1, r2
 80032e8:	d100      	bne.n	80032ec <memcpy+0xc>
 80032ea:	bd10      	pop	{r4, pc}
 80032ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032f4:	e7f7      	b.n	80032e6 <memcpy+0x6>

080032f6 <memset>:
 80032f6:	4603      	mov	r3, r0
 80032f8:	4402      	add	r2, r0
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d100      	bne.n	8003300 <memset+0xa>
 80032fe:	4770      	bx	lr
 8003300:	f803 1b01 	strb.w	r1, [r3], #1
 8003304:	e7f9      	b.n	80032fa <memset+0x4>
	...

08003308 <_init>:
 8003308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330a:	bf00      	nop
 800330c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800330e:	bc08      	pop	{r3}
 8003310:	469e      	mov	lr, r3
 8003312:	4770      	bx	lr

08003314 <_fini>:
 8003314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003316:	bf00      	nop
 8003318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331a:	bc08      	pop	{r3}
 800331c:	469e      	mov	lr, r3
 800331e:	4770      	bx	lr
